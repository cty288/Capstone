{
  "api/Framework.AbstractSavableModel.html": {
    "href": "api/Framework.AbstractSavableModel.html",
    "title": "Class AbstractSavableModel | Example Unity documentation",
    "keywords": "Class AbstractSavableModel Inheritance object AbstractModel AbstractSavableModel EntityModel<T> Implements IModel ICanSetArchitecture ICanGetUtility ICanSendEvent IBelongToArchitecture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Framework Assembly: MainGame.dll Syntax public abstract class AbstractSavableModel : AbstractModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture Methods | Improve this Doc View Source OnInit() Declaration protected override void OnInit() Overrides MikroFramework.Architecture.AbstractModel.OnInit() | Improve this Doc View Source OnLoad(string) Declaration public virtual void OnLoad(string suffix) Parameters Type Name Description string suffix | Improve this Doc View Source OnSave(string) Declaration public virtual void OnSave(string suffix) Parameters Type Name Description string suffix | Improve this Doc View Source Save(string) Declaration public void Save(string suffix) Parameters Type Name Description string suffix Implements MikroFramework.Architecture.IModel MikroFramework.Architecture.ICanSetArchitecture MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.ICanSendEvent MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Framework.AbstractSavableSystem.html": {
    "href": "api/Framework.AbstractSavableSystem.html",
    "title": "Class AbstractSavableSystem | Example Unity documentation",
    "keywords": "Class AbstractSavableSystem Inheritance object AbstractSystem AbstractSavableSystem Implements ISystem ICanSetArchitecture ICanGetModel ICanGetUtility ICanSendEvent ICanRegisterEvent ICanGetSystem ICanSendQuery IBelongToArchitecture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Framework Assembly: MainGame.dll Syntax public abstract class AbstractSavableSystem : AbstractSystem, ISystem, ICanSetArchitecture, ICanGetModel, ICanGetUtility, ICanSendEvent, ICanRegisterEvent, ICanGetSystem, ICanSendQuery, IBelongToArchitecture Methods | Improve this Doc View Source OnInit() Declaration protected override void OnInit() Overrides MikroFramework.Architecture.AbstractSystem.OnInit() | Improve this Doc View Source OnLoad(string) Declaration public virtual void OnLoad(string suffix) Parameters Type Name Description string suffix | Improve this Doc View Source OnSave(string) Declaration public virtual void OnSave(string suffix) Parameters Type Name Description string suffix | Improve this Doc View Source Save(string) Declaration public void Save(string suffix) Parameters Type Name Description string suffix Implements MikroFramework.Architecture.ISystem MikroFramework.Architecture.ICanSetArchitecture MikroFramework.Architecture.ICanGetModel MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.ICanSendEvent MikroFramework.Architecture.ICanRegisterEvent MikroFramework.Architecture.ICanGetSystem MikroFramework.ICanSendQuery MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Framework.MainGame.html": {
    "href": "api/Framework.MainGame.html",
    "title": "Class MainGame | Example Unity documentation",
    "keywords": "Class MainGame Inheritance object Architecture<MainGame> SavableArchitecture<MainGame> MainGame Implements IArchitecture Inherited Members SavableArchitecture<MainGame>.savableModels SavableArchitecture<MainGame>.savableSystems SavableArchitecture<MainGame>.IsSave SavableArchitecture<MainGame>.RegisterModel<T>(T) SavableArchitecture<MainGame>.RegisterSystem<T>(T) SavableArchitecture<MainGame>.SaveGame() SavableArchitecture<MainGame>.ClearSave() Architecture<MainGame>.Interface Architecture<MainGame>.OnRegisterPatch Architecture<MainGame>.RegisterExtensibleUtility<T>(T) Architecture<MainGame>.GetModel<T>() Architecture<MainGame>.SendCommand<T>() Architecture<MainGame>.SendCommand<T>(T) Architecture<MainGame>.GetSystem<T>(Action<T>) Architecture<MainGame>.ResetArchitecture() Architecture<MainGame>.SendEvent<T>() Architecture<MainGame>.SendEvent<T>(T) Architecture<MainGame>.RegisterEvent<T>(Action<T>) Architecture<MainGame>.UnRegisterEvent<T>(Action<T>) Architecture<MainGame>.SendQuery<TResult>(IQuery<TResult>) Architecture<MainGame>.GetUtility<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Framework Assembly: MainGame.dll Syntax public class MainGame : SavableArchitecture<MainGame>, IArchitecture Properties | Improve this Doc View Source saveFileSuffix Declaration protected override string saveFileSuffix { get; } Property Value Type Description string Overrides SavableArchitecture<MainGame>.saveFileSuffix Methods | Improve this Doc View Source Init() Declaration protected override void Init() Overrides MikroFramework.Architecture.Architecture<Framework.MainGame>.Init() Implements MikroFramework.Architecture.IArchitecture"
  },
  "api/Framework.MainGame_Test.html": {
    "href": "api/Framework.MainGame_Test.html",
    "title": "Class MainGame_Test | Example Unity documentation",
    "keywords": "Class MainGame_Test Inheritance object Architecture<MainGame_Test> SavableArchitecture<MainGame_Test> MainGame_Test Implements IArchitecture Inherited Members SavableArchitecture<MainGame_Test>.savableModels SavableArchitecture<MainGame_Test>.savableSystems SavableArchitecture<MainGame_Test>.IsSave SavableArchitecture<MainGame_Test>.RegisterModel<T>(T) SavableArchitecture<MainGame_Test>.RegisterSystem<T>(T) SavableArchitecture<MainGame_Test>.SaveGame() SavableArchitecture<MainGame_Test>.ClearSave() Architecture<MainGame_Test>.Interface Architecture<MainGame_Test>.OnRegisterPatch Architecture<MainGame_Test>.RegisterExtensibleUtility<T>(T) Architecture<MainGame_Test>.GetModel<T>() Architecture<MainGame_Test>.SendCommand<T>() Architecture<MainGame_Test>.SendCommand<T>(T) Architecture<MainGame_Test>.GetSystem<T>(Action<T>) Architecture<MainGame_Test>.ResetArchitecture() Architecture<MainGame_Test>.SendEvent<T>() Architecture<MainGame_Test>.SendEvent<T>(T) Architecture<MainGame_Test>.RegisterEvent<T>(Action<T>) Architecture<MainGame_Test>.UnRegisterEvent<T>(Action<T>) Architecture<MainGame_Test>.SendQuery<TResult>(IQuery<TResult>) Architecture<MainGame_Test>.GetUtility<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Framework Assembly: MainGame.dll Syntax public class MainGame_Test : SavableArchitecture<MainGame_Test>, IArchitecture Properties | Improve this Doc View Source saveFileSuffix Declaration protected override string saveFileSuffix { get; } Property Value Type Description string Overrides SavableArchitecture<MainGame_Test>.saveFileSuffix Methods | Improve this Doc View Source Init() Declaration protected override void Init() Overrides MikroFramework.Architecture.Architecture<Framework.MainGame_Test>.Init() Implements MikroFramework.Architecture.IArchitecture"
  },
  "api/Framework.SavableArchitecture-1.html": {
    "href": "api/Framework.SavableArchitecture-1.html",
    "title": "Class SavableArchitecture<T> | Example Unity documentation",
    "keywords": "Class SavableArchitecture<T> Inheritance object Architecture<T> SavableArchitecture<T> MainGame MainGame_Test Implements IArchitecture Inherited Members Architecture<T>.Interface Architecture<T>.OnRegisterPatch Architecture<T>.Init() Architecture<T>.RegisterExtensibleUtility<T>(T) Architecture<T>.GetModel<T>() Architecture<T>.SendCommand<T>() Architecture<T>.SendCommand<T>(T) Architecture<T>.GetSystem<T>(Action<T>) Architecture<T>.ResetArchitecture() Architecture<T>.SendEvent<T>() Architecture<T>.SendEvent<T>(T) Architecture<T>.RegisterEvent<T>(Action<T>) Architecture<T>.UnRegisterEvent<T>(Action<T>) Architecture<T>.SendQuery<TResult>(IQuery<TResult>) Architecture<T>.GetUtility<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Framework Assembly: MainGame.dll Syntax public abstract class SavableArchitecture<T> : Architecture<T>, IArchitecture where T : Architecture<T>, new() Type Parameters Name Description T Fields | Improve this Doc View Source IsSave Declaration protected const bool IsSave = true Field Value Type Description bool | Improve this Doc View Source savableModels Declaration protected List<AbstractSavableModel> savableModels Field Value Type Description List<AbstractSavableModel> | Improve this Doc View Source savableSystems Declaration protected List<AbstractSavableSystem> savableSystems Field Value Type Description List<AbstractSavableSystem> Properties | Improve this Doc View Source saveFileSuffix Declaration protected abstract string saveFileSuffix { get; } Property Value Type Description string Methods | Improve this Doc View Source ClearSave() Declaration public void ClearSave() | Improve this Doc View Source RegisterModel<T>(T) Declaration public void RegisterModel<T>(T defaultModel) where T : class, IModel Parameters Type Name Description T defaultModel Type Parameters Name Description T | Improve this Doc View Source RegisterSystem<T>(T) Declaration public void RegisterSystem<T>(T defaultSystem) where T : class, ISystem Parameters Type Name Description T defaultSystem Type Parameters Name Description T | Improve this Doc View Source SaveGame() Declaration public void SaveGame() Implements MikroFramework.Architecture.IArchitecture"
  },
  "api/Framework.html": {
    "href": "api/Framework.html",
    "title": "Namespace Framework | Example Unity documentation",
    "keywords": "Namespace Framework Classes AbstractSavableModel AbstractSavableSystem MainGame MainGame_Test SavableArchitecture<T>"
  },
  "api/Runtime.DataFramework.Entities.Builders.BasicEntityBuilder-1.html": {
    "href": "api/Runtime.DataFramework.Entities.Builders.BasicEntityBuilder-1.html",
    "title": "Class BasicEntityBuilder<T> | Example Unity documentation",
    "keywords": "Class BasicEntityBuilder<T> Inheritance object EntityBuilder<BasicEntityBuilder<T>, T> BasicEntityBuilder<T> Implements IPoolable Inherited Members EntityBuilder<BasicEntityBuilder<T>, T>.Entity EntityBuilder<BasicEntityBuilder<T>, T>.onEntityCreated EntityBuilder<BasicEntityBuilder<T>, T>.RegisterOnEntityCreated(Action<T>) EntityBuilder<BasicEntityBuilder<T>, T>.CheckEntity() EntityBuilder<BasicEntityBuilder<T>, T>.FromConfig() EntityBuilder<BasicEntityBuilder<T>, T>.SetProperty<ValueType>(PropertyNameInfo, ValueType, IPropertyDependencyModifier<ValueType>) EntityBuilder<BasicEntityBuilder<T>, T>.SetModifier<ValueType>(PropertyNameInfo, IPropertyDependencyModifier<ValueType>) EntityBuilder<BasicEntityBuilder<T>, T>.SetDependencies(PropertyNameInfo, PropertyNameInfo[]) EntityBuilder<BasicEntityBuilder<T>, T>.Build() EntityBuilder<BasicEntityBuilder<T>, T>.OnRecycled() EntityBuilder<BasicEntityBuilder<T>, T>.IsRecycled EntityBuilder<BasicEntityBuilder<T>, T>.RecycleToCache() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.Builders Assembly: MainGame.dll Syntax public class BasicEntityBuilder<T> : EntityBuilder<BasicEntityBuilder<T>, T>, IPoolable where T : class, IEntity, new() Type Parameters Name Description T Methods | Improve this Doc View Source Allocate(int) Declaration public static BasicEntityBuilder<T> Allocate(int rarity) Parameters Type Name Description int rarity Returns Type Description BasicEntityBuilder<T> | Improve this Doc View Source RecycleToCache() Declaration public override void RecycleToCache() Overrides EntityBuilder<BasicEntityBuilder<T>, T>.RecycleToCache() Implements MikroFramework.Pool.IPoolable"
  },
  "api/Runtime.DataFramework.Entities.Builders.EntityBuilder-2.html": {
    "href": "api/Runtime.DataFramework.Entities.Builders.EntityBuilder-2.html",
    "title": "Class EntityBuilder<TBuilder, TEntity> | Example Unity documentation",
    "keywords": "Class EntityBuilder<TBuilder, TEntity> Inheritance object EntityBuilder<TBuilder, TEntity> BasicEntityBuilder<T> EnemyBuilder<T> Implements IPoolable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.Builders Assembly: MainGame.dll Syntax public abstract class EntityBuilder<TBuilder, TEntity> : IPoolable where TBuilder : EntityBuilder<TBuilder, TEntity> where TEntity : class, IEntity, new() Type Parameters Name Description TBuilder TEntity Constructors | Improve this Doc View Source EntityBuilder() Declaration public EntityBuilder() Fields | Improve this Doc View Source onEntityCreated Declaration protected Action<TEntity> onEntityCreated Field Value Type Description Action<TEntity> Properties | Improve this Doc View Source Entity Declaration protected virtual TEntity Entity { get; set; } Property Value Type Description TEntity | Improve this Doc View Source IsRecycled Declaration public bool IsRecycled { get; set; } Property Value Type Description bool Methods | Improve this Doc View Source Build() Declaration public TEntity Build() Returns Type Description TEntity | Improve this Doc View Source CheckEntity() Declaration protected void CheckEntity() | Improve this Doc View Source FromConfig() Declaration public TBuilder FromConfig() Returns Type Description TBuilder | Improve this Doc View Source OnRecycled() Declaration public void OnRecycled() | Improve this Doc View Source RecycleToCache() Declaration public abstract void RecycleToCache() | Improve this Doc View Source RegisterOnEntityCreated(Action<TEntity>) Declaration public TBuilder RegisterOnEntityCreated(Action<TEntity> onCreated) Parameters Type Name Description Action<TEntity> onCreated Returns Type Description TBuilder | Improve this Doc View Source SetDependencies(PropertyNameInfo, PropertyNameInfo[]) Set dependencies for a property Declaration public TBuilder SetDependencies(PropertyNameInfo propertyName, PropertyNameInfo[] dependencies) Parameters Type Name Description PropertyNameInfo propertyName PropertyNameInfo[] dependencies Returns Type Description TBuilder | Improve this Doc View Source SetModifier<ValueType>(PropertyNameInfo, IPropertyDependencyModifier<ValueType>) Override the property's modifier If the entity has multiple properties with the same name, every property will be overriden Declaration public TBuilder SetModifier<ValueType>(PropertyNameInfo propertyName, IPropertyDependencyModifier<ValueType> modifier) Parameters Type Name Description PropertyNameInfo propertyName IPropertyDependencyModifier<ValueType> modifier Returns Type Description TBuilder Type Parameters Name Description ValueType | Improve this Doc View Source SetProperty<ValueType>(PropertyNameInfo, ValueType, IPropertyDependencyModifier<ValueType>) Override the property's base value and its modifier If the entity has multiple properties with the same name, every property will be overriden Declaration public TBuilder SetProperty<ValueType>(PropertyNameInfo propertyName, ValueType value, IPropertyDependencyModifier<ValueType> modifier = null) Parameters Type Name Description PropertyNameInfo propertyName ValueType value IPropertyDependencyModifier<ValueType> modifier Returns Type Description TBuilder Type Parameters Name Description ValueType Implements MikroFramework.Pool.IPoolable"
  },
  "api/Runtime.DataFramework.Entities.Builders.EntityBuilderFactory.html": {
    "href": "api/Runtime.DataFramework.Entities.Builders.EntityBuilderFactory.html",
    "title": "Class EntityBuilderFactory | Example Unity documentation",
    "keywords": "Class EntityBuilderFactory Inheritance object EntityBuilderFactory Implements IEntityBuilderFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.Builders Assembly: MainGame.dll Syntax public class EntityBuilderFactory : IEntityBuilderFactory Methods | Improve this Doc View Source GetBuilder<TBuilder, TEntity>(int) Declaration public TBuilder GetBuilder<TBuilder, TEntity>(int rarity) where TBuilder : EntityBuilder<TBuilder, TEntity> where TEntity : class, IEntity, new() Parameters Type Name Description int rarity Returns Type Description TBuilder Type Parameters Name Description TBuilder TEntity Implements IEntityBuilderFactory"
  },
  "api/Runtime.DataFramework.Entities.Builders.IEntityBuilderFactory.html": {
    "href": "api/Runtime.DataFramework.Entities.Builders.IEntityBuilderFactory.html",
    "title": "Interface IEntityBuilderFactory | Example Unity documentation",
    "keywords": "Interface IEntityBuilderFactory Namespace: Runtime.DataFramework.Entities.Builders Assembly: MainGame.dll Syntax public interface IEntityBuilderFactory Methods | Improve this Doc View Source GetBuilder<TBuilder, TEntity>(int) Declaration TBuilder GetBuilder<TBuilder, TEntity>(int rarity) where TBuilder : EntityBuilder<TBuilder, TEntity> where TEntity : class, IEntity, new() Parameters Type Name Description int rarity Returns Type Description TBuilder Type Parameters Name Description TBuilder TEntity"
  },
  "api/Runtime.DataFramework.Entities.Builders.html": {
    "href": "api/Runtime.DataFramework.Entities.Builders.html",
    "title": "Namespace Runtime.DataFramework.Entities.Builders | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Entities.Builders Classes BasicEntityBuilder<T> EntityBuilderFactory EntityBuilder<TBuilder, TEntity> Interfaces IEntityBuilderFactory"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties.AbstractHaveCustomPropertiesEntity.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties.AbstractHaveCustomPropertiesEntity.html",
    "title": "Class AbstractHaveCustomPropertiesEntity | Example Unity documentation",
    "keywords": "Class AbstractHaveCustomPropertiesEntity Inheritance object Entity AbstractHaveCustomPropertiesEntity EnemyEntity<T> Implements IHaveCustomProperties IEntity IPoolable Inherited Members Entity.EntityName Entity.UUID Entity.configTable Entity.OnLoadFromSave() Entity.RegisterInitialProperty<T>(T) Entity.RegisterTempProperty<T>(T, string, bool, bool) Entity.OnAllocate() Entity.SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) Entity.SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) Entity.LoadPropertyBaseValueFromConfig() Entity.GetProperty(PropertyName) Entity.GetProperty(PropertyNameInfo) Entity.GetProperty<T>() Entity.GetProperty<T>(PropertyNameInfo) Entity.GetProperty(Type) Entity.HasProperty(PropertyNameInfo) Entity.TryGetProperty(PropertyNameInfo, out IPropertyBase) Entity.Initialize() Entity.InitProperty(IPropertyBase) Entity.OnRecycled() Entity.IsRecycled Entity.RecycleToCache() Entity.OnDoRecycle() Entity.OnRecycle() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties Assembly: MainGame.dll Syntax public abstract class AbstractHaveCustomPropertiesEntity : Entity, IHaveCustomProperties, IEntity, IPoolable Methods | Improve this Doc View Source GetCustomDataValue(string, string) Declaration public IBindableProperty GetCustomDataValue(string customPropertyName, string dataName) Parameters Type Name Description string customPropertyName string dataName Returns Type Description IBindableProperty | Improve this Doc View Source GetCustomDataValue<T>(string, string) If your custom property is DataOnlyProperty, use dynamic for T Declaration public BindableProperty<T> GetCustomDataValue<T>(string customPropertyName, string dataName) Parameters Type Name Description string customPropertyName string dataName Returns Type Description BindableProperty<T> Type Parameters Name Description T | Improve this Doc View Source GetCustomProperties() Declaration public Dictionary<string, ICustomProperty> GetCustomProperties() Returns Type Description Dictionary<string, ICustomProperty> | Improve this Doc View Source HasCustomProperty(string) Declaration public bool HasCustomProperty(string propertyName) Parameters Type Name Description string propertyName Returns Type Description bool | Improve this Doc View Source OnEntityRegisterProperties() Declaration protected abstract void OnEntityRegisterProperties() | Improve this Doc View Source OnRegisterCustomProperties() Declaration protected abstract ICustomProperty[] OnRegisterCustomProperties() Returns Type Description ICustomProperty[] | Improve this Doc View Source OnRegisterProperties() Declaration protected override void OnRegisterProperties() Overrides Entity.OnRegisterProperties() | Improve this Doc View Source RegisterOnCustomDataChanged(string, Action<ICustomProperty>) Declaration public IUnRegister RegisterOnCustomDataChanged(string customPropertyName, Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description string customPropertyName Action<ICustomProperty> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source RegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, dynamic, dynamic>) Declaration public IUnRegister RegisterOnCustomDataChanged(string customPropertyName, string dataName, Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged) Parameters Type Name Description string customPropertyName string dataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source UnRegisterOnCustomDataChanged(string, Action<ICustomProperty>) Declaration public void UnRegisterOnCustomDataChanged(string customPropertyName, Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description string customPropertyName Action<ICustomProperty> onCustomDataChanged | Improve this Doc View Source UnRegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, dynamic, dynamic>) Declaration public void UnRegisterOnCustomDataChanged(string customPropertyName, string dataName, Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged) Parameters Type Name Description string customPropertyName string dataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged Implements IHaveCustomProperties IEntity MikroFramework.Pool.IPoolable"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties.IHaveCustomProperties.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties.IHaveCustomProperties.html",
    "title": "Interface IHaveCustomProperties | Example Unity documentation",
    "keywords": "Interface IHaveCustomProperties Inherited Members IEntity.EntityName IEntity.RegisterInitialProperty<T>(T) IEntity.RegisterTempProperty<T>(T, string, bool, bool) IEntity.GetProperty(PropertyName) IEntity.GetProperty(PropertyNameInfo) IEntity.GetProperty<T>() IEntity.GetProperty<T>(PropertyNameInfo) IEntity.GetProperty(Type) IEntity.HasProperty(PropertyNameInfo) IEntity.TryGetProperty(PropertyNameInfo, out IPropertyBase) IEntity.OnLoadFromSave() IEntity.Initialize() IEntity.UUID IEntity.OnAllocate() IEntity.SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) IEntity.SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) IEntity.LoadPropertyBaseValueFromConfig() IPoolable.OnRecycled() IPoolable.IsRecycled IPoolable.RecycleToCache() Namespace: Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties Assembly: MainGame.dll Syntax public interface IHaveCustomProperties : IEntity, IPoolable Methods | Improve this Doc View Source GetCustomDataValue(string, string) Declaration IBindableProperty GetCustomDataValue(string customPropertyName, string dataName) Parameters Type Name Description string customPropertyName string dataName Returns Type Description IBindableProperty | Improve this Doc View Source GetCustomDataValue<T>(string, string) Declaration BindableProperty<T> GetCustomDataValue<T>(string customPropertyName, string dataName) Parameters Type Name Description string customPropertyName string dataName Returns Type Description BindableProperty<T> Type Parameters Name Description T | Improve this Doc View Source GetCustomProperties() Declaration Dictionary<string, ICustomProperty> GetCustomProperties() Returns Type Description Dictionary<string, ICustomProperty> | Improve this Doc View Source HasCustomProperty(string) Declaration bool HasCustomProperty(string propertyName) Parameters Type Name Description string propertyName Returns Type Description bool | Improve this Doc View Source RegisterOnCustomDataChanged(string, Action<ICustomProperty>) Declaration IUnRegister RegisterOnCustomDataChanged(string customPropertyName, Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description string customPropertyName Action<ICustomProperty> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source RegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, object, object>) Declaration IUnRegister RegisterOnCustomDataChanged(string customPropertyName, string dataName, Action<ICustomDataProperty, object, object> onCustomDataChanged) Parameters Type Name Description string customPropertyName string dataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source UnRegisterOnCustomDataChanged(string, Action<ICustomProperty>) Declaration void UnRegisterOnCustomDataChanged(string customPropertyName, Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description string customPropertyName Action<ICustomProperty> onCustomDataChanged | Improve this Doc View Source UnRegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, object, object>) Declaration void UnRegisterOnCustomDataChanged(string customPropertyName, string dataName, Action<ICustomDataProperty, object, object> onCustomDataChanged) Parameters Type Name Description string customPropertyName string dataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties.html",
    "title": "Namespace Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties Classes AbstractHaveCustomPropertiesEntity Interfaces IHaveCustomProperties"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.Tags.IHaveTags.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.Tags.IHaveTags.html",
    "title": "Interface IHaveTags | Example Unity documentation",
    "keywords": "Interface IHaveTags Inherited Members IEntity.EntityName IEntity.RegisterInitialProperty<T>(T) IEntity.RegisterTempProperty<T>(T, string, bool, bool) IEntity.GetProperty(PropertyName) IEntity.GetProperty(PropertyNameInfo) IEntity.GetProperty<T>() IEntity.GetProperty<T>(PropertyNameInfo) IEntity.GetProperty(Type) IEntity.HasProperty(PropertyNameInfo) IEntity.TryGetProperty(PropertyNameInfo, out IPropertyBase) IEntity.OnLoadFromSave() IEntity.Initialize() IEntity.UUID IEntity.OnAllocate() IEntity.SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) IEntity.SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) IEntity.LoadPropertyBaseValueFromConfig() IPoolable.OnRecycled() IPoolable.IsRecycled IPoolable.RecycleToCache() Namespace: Runtime.DataFramework.Entities.ClassifiedTemplates.Tags Assembly: MainGame.dll Syntax public interface IHaveTags : IEntity, IPoolable Methods | Improve this Doc View Source GetTagProperty() Declaration ITagProperty GetTagProperty() Returns Type Description ITagProperty"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.Tags.Tag.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.Tags.Tag.html",
    "title": "Struct Tag | Example Unity documentation",
    "keywords": "Struct Tag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Runtime.DataFramework.Entities.ClassifiedTemplates.Tags Assembly: MainGame.dll Syntax public struct Tag Constructors | Improve this Doc View Source Tag(TagName, int) Declaration public Tag(TagName name, int level) Parameters Type Name Description TagName name int level Fields | Improve this Doc View Source Level Declaration public int Level Field Value Type Description int | Improve this Doc View Source Name Declaration public TagName Name Field Value Type Description TagName"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.Tags.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.Tags.html",
    "title": "Namespace Runtime.DataFramework.Entities.ClassifiedTemplates.Tags | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Entities.ClassifiedTemplates.Tags Structs Tag Interfaces IHaveTags"
  },
  "api/Runtime.DataFramework.Entities.ClassifiedTemplates.html": {
    "href": "api/Runtime.DataFramework.Entities.ClassifiedTemplates.html",
    "title": "Namespace Runtime.DataFramework.Entities.ClassifiedTemplates | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Entities.ClassifiedTemplates Namespaces Runtime.DataFramework.Entities.ClassifiedTemplates.CustomProperties Runtime.DataFramework.Entities.ClassifiedTemplates.Tags"
  },
  "api/Runtime.DataFramework.Entities.CommonEntityModel.html": {
    "href": "api/Runtime.DataFramework.Entities.CommonEntityModel.html",
    "title": "Class CommonEntityModel | Example Unity documentation",
    "keywords": "Class CommonEntityModel Inheritance object AbstractModel AbstractSavableModel EntityModel<IEntity> CommonEntityModel Implements ICommonEntityModel IEntityModel<IEntity> IEntityModel IModel ICanSetArchitecture ICanGetUtility ICanSendEvent IBelongToArchitecture Inherited Members EntityModel<IEntity>.entityBuilderFactory EntityModel<IEntity>.entities EntityModel<IEntity>.OnInit() EntityModel<IEntity>.OnEntityBuilt(IEntity) EntityModel<IEntity>.GetEntity(string) EntityModel<IEntity>.RemoveEntity(string) EntityModel<IEntity>.EntityCount AbstractSavableModel.Save(string) AbstractSavableModel.OnLoad(string) AbstractSavableModel.OnSave(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public class CommonEntityModel : EntityModel<IEntity>, ICommonEntityModel, IEntityModel<IEntity>, IEntityModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture Methods | Improve this Doc View Source GetBuilder<TEntity>(int, bool) Get the BasicEntityBuilder for the entity type Declaration public BasicEntityBuilder<TEntity> GetBuilder<TEntity>(int rarity, bool addToModelOnceBuilt = true) where TEntity : class, IEntity, new() Parameters Type Name Description int rarity bool addToModelOnceBuilt Returns Type Description BasicEntityBuilder<TEntity> Type Parameters Name Description TEntity | Improve this Doc View Source GetBuilder<TBuilder, TEntity>(int, bool) Get the general builder for the entity type Declaration public TBuilder GetBuilder<TBuilder, TEntity>(int rarity, bool addToModelOnceBuilt = true) where TBuilder : EntityBuilder<TBuilder, TEntity> where TEntity : class, IEntity, new() Parameters Type Name Description int rarity bool addToModelOnceBuilt Once the entity is built, add it to the model Returns Type Description TBuilder Type Parameters Name Description TBuilder The type of the builder you want to use You need to make sure that builder is okay to build the target entity TEntity | Improve this Doc View Source GetEntity<T>(string) Declaration public T GetEntity<T>(string id) where T : class, IEntity Parameters Type Name Description string id Returns Type Description T Type Parameters Name Description T Implements ICommonEntityModel IEntityModel<T> IEntityModel MikroFramework.Architecture.IModel MikroFramework.Architecture.ICanSetArchitecture MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.ICanSendEvent MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Runtime.DataFramework.Entities.Enemies.EnemyBuilder-1.html": {
    "href": "api/Runtime.DataFramework.Entities.Enemies.EnemyBuilder-1.html",
    "title": "Class EnemyBuilder<T> | Example Unity documentation",
    "keywords": "Class EnemyBuilder<T> Inheritance object EntityBuilder<EnemyBuilder<T>, T> EnemyBuilder<T> Implements IPoolable Inherited Members EntityBuilder<EnemyBuilder<T>, T>.Entity EntityBuilder<EnemyBuilder<T>, T>.onEntityCreated EntityBuilder<EnemyBuilder<T>, T>.RegisterOnEntityCreated(Action<T>) EntityBuilder<EnemyBuilder<T>, T>.CheckEntity() EntityBuilder<EnemyBuilder<T>, T>.FromConfig() EntityBuilder<EnemyBuilder<T>, T>.SetProperty<ValueType>(PropertyNameInfo, ValueType, IPropertyDependencyModifier<ValueType>) EntityBuilder<EnemyBuilder<T>, T>.SetModifier<ValueType>(PropertyNameInfo, IPropertyDependencyModifier<ValueType>) EntityBuilder<EnemyBuilder<T>, T>.SetDependencies(PropertyNameInfo, PropertyNameInfo[]) EntityBuilder<EnemyBuilder<T>, T>.Build() EntityBuilder<EnemyBuilder<T>, T>.OnRecycled() EntityBuilder<EnemyBuilder<T>, T>.IsRecycled EntityBuilder<EnemyBuilder<T>, T>.RecycleToCache() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.Enemies Assembly: MainGame.dll Syntax public class EnemyBuilder<T> : EntityBuilder<EnemyBuilder<T>, T>, IPoolable where T : class, IEntity, new() Type Parameters Name Description T Constructors | Improve this Doc View Source EnemyBuilder() Declaration public EnemyBuilder() Methods | Improve this Doc View Source Allocate(int) Declaration public static EnemyBuilder<T> Allocate(int rarity) Parameters Type Name Description int rarity Returns Type Description EnemyBuilder<T> | Improve this Doc View Source RecycleToCache() Declaration public override void RecycleToCache() Overrides EntityBuilder<EnemyBuilder<T>, T>.RecycleToCache() | Improve this Doc View Source SetAllBasics(int, HealthInfo, float, float, params TasteType[]) Declaration public EnemyBuilder<T> SetAllBasics(int danger, HealthInfo healthInfo, float vigiliance, float attackRange, params TasteType[] tasteTypes) Parameters Type Name Description int danger HealthInfo healthInfo float vigiliance float attackRange TasteType[] tasteTypes Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetAllBasicsModifiers(IPropertyDependencyModifier<int>, IPropertyDependencyModifier<HealthInfo>, IPropertyDependencyModifier<float>, IPropertyDependencyModifier<float>) Declaration public EnemyBuilder<T> SetAllBasicsModifiers(IPropertyDependencyModifier<int> dangerModifier, IPropertyDependencyModifier<HealthInfo> healthInfoModifier, IPropertyDependencyModifier<float> vigilianceModifier, IPropertyDependencyModifier<float> attackRangeModifier) Parameters Type Name Description IPropertyDependencyModifier<int> dangerModifier IPropertyDependencyModifier<HealthInfo> healthInfoModifier IPropertyDependencyModifier<float> vigilianceModifier IPropertyDependencyModifier<float> attackRangeModifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetAttackRange(float, IPropertyDependencyModifier<float>) Declaration public EnemyBuilder<T> SetAttackRange(float attackRange, IPropertyDependencyModifier<float> modifier = null) Parameters Type Name Description float attackRange IPropertyDependencyModifier<float> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetAttackRangeModifier(IPropertyDependencyModifier<float>) Declaration public EnemyBuilder<T> SetAttackRangeModifier(IPropertyDependencyModifier<float> modifier = null) Parameters Type Name Description IPropertyDependencyModifier<float> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetDanger(int, IPropertyDependencyModifier<int>) Declaration public EnemyBuilder<T> SetDanger(int danger, IPropertyDependencyModifier<int> modifier = null) Parameters Type Name Description int danger IPropertyDependencyModifier<int> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetDangerModifier(IPropertyDependencyModifier<int>) Declaration public EnemyBuilder<T> SetDangerModifier(IPropertyDependencyModifier<int> modifier = null) Parameters Type Name Description IPropertyDependencyModifier<int> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetHealth(HealthInfo, IPropertyDependencyModifier<HealthInfo>) Declaration public EnemyBuilder<T> SetHealth(HealthInfo healthInfo, IPropertyDependencyModifier<HealthInfo> modifier = null) Parameters Type Name Description HealthInfo healthInfo IPropertyDependencyModifier<HealthInfo> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetHealthModifier(IPropertyDependencyModifier<HealthInfo>) Declaration public EnemyBuilder<T> SetHealthModifier(IPropertyDependencyModifier<HealthInfo> modifier = null) Parameters Type Name Description IPropertyDependencyModifier<HealthInfo> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetTaste(params TasteType[]) Declaration public EnemyBuilder<T> SetTaste(params TasteType[] tasteTypes) Parameters Type Name Description TasteType[] tasteTypes Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetVigiliance(float, IPropertyDependencyModifier<float>) Declaration public EnemyBuilder<T> SetVigiliance(float vigiliance, IPropertyDependencyModifier<float> modifier = null) Parameters Type Name Description float vigiliance IPropertyDependencyModifier<float> modifier Returns Type Description EnemyBuilder<T> | Improve this Doc View Source SetVigilianceModifier(IPropertyDependencyModifier<float>) Declaration public EnemyBuilder<T> SetVigilianceModifier(IPropertyDependencyModifier<float> modifier = null) Parameters Type Name Description IPropertyDependencyModifier<float> modifier Returns Type Description EnemyBuilder<T> Implements MikroFramework.Pool.IPoolable"
  },
  "api/Runtime.DataFramework.Entities.Enemies.EnemyEntity-1.html": {
    "href": "api/Runtime.DataFramework.Entities.Enemies.EnemyEntity-1.html",
    "title": "Class EnemyEntity<T> | Example Unity documentation",
    "keywords": "Class EnemyEntity<T> Inheritance object Entity AbstractHaveCustomPropertiesEntity EnemyEntity<T> Implements IEnemyEntity IHaveCustomProperties IHaveTags IEntity IPoolable Inherited Members AbstractHaveCustomPropertiesEntity.OnRegisterProperties() AbstractHaveCustomPropertiesEntity.OnRegisterCustomProperties() AbstractHaveCustomPropertiesEntity.GetCustomProperties() AbstractHaveCustomPropertiesEntity.GetCustomDataValue(string, string) AbstractHaveCustomPropertiesEntity.GetCustomDataValue<T>(string, string) AbstractHaveCustomPropertiesEntity.RegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, dynamic, dynamic>) AbstractHaveCustomPropertiesEntity.RegisterOnCustomDataChanged(string, Action<ICustomProperty>) AbstractHaveCustomPropertiesEntity.UnRegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, dynamic, dynamic>) AbstractHaveCustomPropertiesEntity.UnRegisterOnCustomDataChanged(string, Action<ICustomProperty>) AbstractHaveCustomPropertiesEntity.HasCustomProperty(string) Entity.EntityName Entity.UUID Entity.configTable Entity.OnLoadFromSave() Entity.RegisterInitialProperty<T>(T) Entity.RegisterTempProperty<T>(T, string, bool, bool) Entity.OnAllocate() Entity.SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) Entity.SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) Entity.LoadPropertyBaseValueFromConfig() Entity.GetProperty(PropertyName) Entity.GetProperty(PropertyNameInfo) Entity.GetProperty<T>() Entity.GetProperty<T>(PropertyNameInfo) Entity.GetProperty(Type) Entity.HasProperty(PropertyNameInfo) Entity.TryGetProperty(PropertyNameInfo, out IPropertyBase) Entity.Initialize() Entity.InitProperty(IPropertyBase) Entity.OnRecycled() Entity.IsRecycled Entity.RecycleToCache() Entity.OnRecycle() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.Enemies Assembly: MainGame.dll Syntax public abstract class EnemyEntity<T> : AbstractHaveCustomPropertiesEntity, IEnemyEntity, IHaveCustomProperties, IHaveTags, IEntity, IPoolable where T : EnemyEntity<T>, new() Type Parameters Name Description T Methods | Improve this Doc View Source GetAttackRange() Declaration public BindableProperty<float> GetAttackRange() Returns Type Description BindableProperty<float> | Improve this Doc View Source GetDanger() Declaration public BindableProperty<int> GetDanger() Returns Type Description BindableProperty<int> | Improve this Doc View Source GetHealth() Declaration public BindableProperty<HealthInfo> GetHealth() Returns Type Description BindableProperty<HealthInfo> | Improve this Doc View Source GetRarity() Declaration public int GetRarity() Returns Type Description int | Improve this Doc View Source GetTagProperty() Declaration public ITagProperty GetTagProperty() Returns Type Description ITagProperty | Improve this Doc View Source GetTaste() Declaration public BindableList<TasteType> GetTaste() Returns Type Description BindableList<TasteType> | Improve this Doc View Source GetVigiliance() Declaration public BindableProperty<float> GetVigiliance() Returns Type Description BindableProperty<float> | Improve this Doc View Source OnDoRecycle() Declaration public override void OnDoRecycle() Overrides Entity.OnDoRecycle() | Improve this Doc View Source OnEnemyRegisterProperties() Declaration protected abstract void OnEnemyRegisterProperties() | Improve this Doc View Source OnEntityRegisterProperties() Declaration protected override void OnEntityRegisterProperties() Overrides AbstractHaveCustomPropertiesEntity.OnEntityRegisterProperties() Implements IEnemyEntity IHaveCustomProperties IHaveTags IEntity MikroFramework.Pool.IPoolable"
  },
  "api/Runtime.DataFramework.Entities.Enemies.EnemyEntityModel.html": {
    "href": "api/Runtime.DataFramework.Entities.Enemies.EnemyEntityModel.html",
    "title": "Class EnemyEntityModel | Example Unity documentation",
    "keywords": "Class EnemyEntityModel Inheritance object AbstractModel AbstractSavableModel EntityModel<IEnemyEntity> EnemyEntityModel Implements IEnemyEntityModel IEntityModel<IEnemyEntity> IEntityModel IModel ICanSetArchitecture ICanGetUtility ICanSendEvent IBelongToArchitecture Inherited Members EntityModel<IEnemyEntity>.entityBuilderFactory EntityModel<IEnemyEntity>.entities EntityModel<IEnemyEntity>.OnInit() EntityModel<IEnemyEntity>.OnEntityBuilt(IEnemyEntity) EntityModel<IEnemyEntity>.GetEntity(string) EntityModel<IEnemyEntity>.RemoveEntity(string) EntityModel<IEnemyEntity>.EntityCount AbstractSavableModel.Save(string) AbstractSavableModel.OnLoad(string) AbstractSavableModel.OnSave(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities.Enemies Assembly: MainGame.dll Syntax public class EnemyEntityModel : EntityModel<IEnemyEntity>, IEnemyEntityModel, IEntityModel<IEnemyEntity>, IEntityModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture Methods | Improve this Doc View Source GetEnemyBuilder<T>(int, bool) Get the enemy builder for the entity type Declaration public EnemyBuilder<T> GetEnemyBuilder<T>(int rarity, bool addToModelOnceBuilt = true) where T : class, IEnemyEntity, new() Parameters Type Name Description int rarity bool addToModelOnceBuilt Returns Type Description EnemyBuilder<T> Type Parameters Name Description T Implements IEnemyEntityModel IEntityModel<T> IEntityModel MikroFramework.Architecture.IModel MikroFramework.Architecture.ICanSetArchitecture MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.ICanSendEvent MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Runtime.DataFramework.Entities.Enemies.IEnemyEntity.html": {
    "href": "api/Runtime.DataFramework.Entities.Enemies.IEnemyEntity.html",
    "title": "Interface IEnemyEntity | Example Unity documentation",
    "keywords": "Interface IEnemyEntity Inherited Members IHaveCustomProperties.GetCustomProperties() IHaveCustomProperties.GetCustomDataValue(string, string) IHaveCustomProperties.GetCustomDataValue<T>(string, string) IHaveCustomProperties.RegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, object, object>) IHaveCustomProperties.RegisterOnCustomDataChanged(string, Action<ICustomProperty>) IHaveCustomProperties.UnRegisterOnCustomDataChanged(string, string, Action<ICustomDataProperty, object, object>) IHaveCustomProperties.UnRegisterOnCustomDataChanged(string, Action<ICustomProperty>) IHaveCustomProperties.HasCustomProperty(string) IEntity.EntityName IEntity.RegisterInitialProperty<T>(T) IEntity.RegisterTempProperty<T>(T, string, bool, bool) IEntity.GetProperty(PropertyName) IEntity.GetProperty(PropertyNameInfo) IEntity.GetProperty<T>() IEntity.GetProperty<T>(PropertyNameInfo) IEntity.GetProperty(Type) IEntity.HasProperty(PropertyNameInfo) IEntity.TryGetProperty(PropertyNameInfo, out IPropertyBase) IEntity.OnLoadFromSave() IEntity.Initialize() IEntity.UUID IEntity.OnAllocate() IEntity.SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) IEntity.SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) IEntity.LoadPropertyBaseValueFromConfig() IPoolable.OnRecycled() IPoolable.IsRecycled IPoolable.RecycleToCache() Namespace: Runtime.DataFramework.Entities.Enemies Assembly: MainGame.dll Syntax public interface IEnemyEntity : IHaveCustomProperties, IEntity, IPoolable Methods | Improve this Doc View Source GetAttackRange() Declaration BindableProperty<float> GetAttackRange() Returns Type Description BindableProperty<float> | Improve this Doc View Source GetDanger() Declaration BindableProperty<int> GetDanger() Returns Type Description BindableProperty<int> | Improve this Doc View Source GetHealth() Declaration BindableProperty<HealthInfo> GetHealth() Returns Type Description BindableProperty<HealthInfo> | Improve this Doc View Source GetRarity() Declaration int GetRarity() Returns Type Description int | Improve this Doc View Source GetTaste() Declaration BindableList<TasteType> GetTaste() Returns Type Description BindableList<TasteType> | Improve this Doc View Source GetVigiliance() Declaration BindableProperty<float> GetVigiliance() Returns Type Description BindableProperty<float>"
  },
  "api/Runtime.DataFramework.Entities.Enemies.IEnemyEntityModel.html": {
    "href": "api/Runtime.DataFramework.Entities.Enemies.IEnemyEntityModel.html",
    "title": "Interface IEnemyEntityModel | Example Unity documentation",
    "keywords": "Interface IEnemyEntityModel Model for enemies Inherited Members IEntityModel<IEnemyEntity>.GetEntity(string) IEntityModel.RemoveEntity(string) IEntityModel.EntityCount IModel.Init() ICanSetArchitecture.SetArchitecture(IArchitecture) IBelongToArchitecture.GetArchitecture() Namespace: Runtime.DataFramework.Entities.Enemies Assembly: MainGame.dll Syntax public interface IEnemyEntityModel : IEntityModel<IEnemyEntity>, IEntityModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture Methods | Improve this Doc View Source GetEnemyBuilder<T>(int, bool) Get the enemy builder for the entity type Declaration EnemyBuilder<T> GetEnemyBuilder<T>(int rarity, bool addToModelOnceBuilt = true) where T : class, IEnemyEntity, new() Parameters Type Name Description int rarity bool addToModelOnceBuilt Returns Type Description EnemyBuilder<T> Type Parameters Name Description T"
  },
  "api/Runtime.DataFramework.Entities.Enemies.html": {
    "href": "api/Runtime.DataFramework.Entities.Enemies.html",
    "title": "Namespace Runtime.DataFramework.Entities.Enemies | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Entities.Enemies Classes EnemyBuilder<T> EnemyEntityModel EnemyEntity<T> Interfaces IEnemyEntity IEnemyEntityModel Model for enemies"
  },
  "api/Runtime.DataFramework.Entities.Entity.html": {
    "href": "api/Runtime.DataFramework.Entities.Entity.html",
    "title": "Class Entity | Example Unity documentation",
    "keywords": "Class Entity Inheritance object Entity AbstractHaveCustomPropertiesEntity Implements IEntity IPoolable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public abstract class Entity : IEntity, IPoolable Constructors | Improve this Doc View Source Entity() Declaration public Entity() Fields | Improve this Doc View Source configTable Declaration protected ConfigTable configTable Field Value Type Description ConfigTable Properties | Improve this Doc View Source EntityName Declaration public abstract string EntityName { get; protected set; } Property Value Type Description string | Improve this Doc View Source IsRecycled Declaration public bool IsRecycled { get; set; } Property Value Type Description bool | Improve this Doc View Source UUID Declaration public string UUID { get; protected set; } Property Value Type Description string Methods | Improve this Doc View Source GetProperty(PropertyName) Get a property by name, return null if not found This will not retrieve those nested properties (in PropertyDict, PropertyList, etc.) To retrieve nested properties, use the one that takes full name instead Declaration public IPropertyBase GetProperty(PropertyName name) Parameters Type Name Description PropertyName name Returns Type Description IPropertyBase | Improve this Doc View Source GetProperty(PropertyNameInfo) Get a property by full name, return null if not found This can retrieve those nested properties (in PropertyDict, PropertyList, etc.) e.g. GetProperty(\"custom_properties.attack.damage\") Declaration public IPropertyBase GetProperty(PropertyNameInfo name) Parameters Type Name Description PropertyNameInfo name Returns Type Description IPropertyBase | Improve this Doc View Source GetProperty(Type) Return a property if you know its type, return null if not found This will not retrieve those nested properties (in PropertyDict, PropertyList, etc.) To retrieve nested properties, use the one that takes full name instead Declaration public IPropertyBase GetProperty(Type type) Parameters Type Name Description Type type Returns Type Description IPropertyBase | Improve this Doc View Source GetProperty<T>() Return a property if you know its type, return null if not found This will not retrieve those nested properties (in PropertyDict, PropertyList, etc.) To retrieve nested properties, use the one that takes full name instead Declaration public T GetProperty<T>() where T : class, IPropertyBase Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetProperty<T>(PropertyNameInfo) Get a property by full name, return null if not found This can retrieve those nested properties (in PropertyDict, PropertyList, etc.) This will auto convert the property to the given type Declaration public T GetProperty<T>(PropertyNameInfo name) where T : class, IPropertyBase Parameters Type Name Description PropertyNameInfo name Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source HasProperty(PropertyNameInfo) Declaration public bool HasProperty(PropertyNameInfo nameInfo) Parameters Type Name Description PropertyNameInfo nameInfo Returns Type Description bool | Improve this Doc View Source InitProperty(IPropertyBase) Declaration protected void InitProperty(IPropertyBase property) Parameters Type Name Description IPropertyBase property | Improve this Doc View Source Initialize() Declaration public void Initialize() | Improve this Doc View Source LoadPropertyBaseValueFromConfig() Declaration public void LoadPropertyBaseValueFromConfig() | Improve this Doc View Source OnAllocate() Declaration public void OnAllocate() | Improve this Doc View Source OnDoRecycle() Declaration public abstract void OnDoRecycle() | Improve this Doc View Source OnLoadFromSave() Declaration public void OnLoadFromSave() | Improve this Doc View Source OnRecycle() Declaration public abstract void OnRecycle() | Improve this Doc View Source OnRecycled() Declaration public void OnRecycled() | Improve this Doc View Source OnRegisterProperties() Declaration protected abstract void OnRegisterProperties() | Improve this Doc View Source RecycleToCache() Declaration public void RecycleToCache() | Improve this Doc View Source RegisterInitialProperty<T>(T) Register a property to the entity. This must be called before the entity is initialized To register a property after the entity is initialized, use RegisterTempProperty Declaration public void RegisterInitialProperty<T>(T property) where T : IPropertyBase Parameters Type Name Description T property Type Parameters Name Description T | Improve this Doc View Source RegisterTempProperty<T>(T, string, bool, bool) Register a property to the entity. The property will be removed once the entity is recycled Declaration public void RegisterTempProperty<T>(T property, string overriddenName, bool isRoot, bool alsoInitialize = true) where T : IPropertyBase Parameters Type Name Description T property string overriddenName bool isRoot bool alsoInitialize Type Parameters Name Description T | Improve this Doc View Source SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) Set the base value of all properties with the given name Declaration public void SetPropertyBaseValue<T>(PropertyNameInfo name, T value, IPropertyDependencyModifier<T> modifier = null) Parameters Type Name Description PropertyNameInfo name T value IPropertyDependencyModifier<T> modifier Type Parameters Name Description T | Improve this Doc View Source SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) Set the modifier of all properties with the given name Declaration public void SetPropertyModifier<T>(PropertyNameInfo name, IPropertyDependencyModifier<T> modifier) Parameters Type Name Description PropertyNameInfo name IPropertyDependencyModifier<T> modifier Type Parameters Name Description T | Improve this Doc View Source TryGetProperty(PropertyNameInfo, out IPropertyBase) Declaration public bool TryGetProperty(PropertyNameInfo nameInfo, out IPropertyBase property) Parameters Type Name Description PropertyNameInfo nameInfo IPropertyBase property Returns Type Description bool Implements IEntity MikroFramework.Pool.IPoolable"
  },
  "api/Runtime.DataFramework.Entities.EntityModel-1.html": {
    "href": "api/Runtime.DataFramework.Entities.EntityModel-1.html",
    "title": "Class EntityModel<T> | Example Unity documentation",
    "keywords": "Class EntityModel<T> Inheritance object AbstractModel AbstractSavableModel EntityModel<T> CommonEntityModel EnemyEntityModel Implements IEntityModel<T> IEntityModel IModel ICanSetArchitecture ICanGetUtility ICanSendEvent IBelongToArchitecture Inherited Members AbstractSavableModel.Save(string) AbstractSavableModel.OnLoad(string) AbstractSavableModel.OnSave(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public abstract class EntityModel<T> : AbstractSavableModel, IEntityModel<T>, IEntityModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture where T : IEntity Type Parameters Name Description T Fields | Improve this Doc View Source entities Declaration protected Dictionary<string, T> entities Field Value Type Description Dictionary<string, T> | Improve this Doc View Source entityBuilderFactory Declaration protected IEntityBuilderFactory entityBuilderFactory Field Value Type Description IEntityBuilderFactory Properties | Improve this Doc View Source EntityCount Declaration public int EntityCount { get; } Property Value Type Description int Methods | Improve this Doc View Source GetEntity(string) Declaration public T GetEntity(string id) Parameters Type Name Description string id Returns Type Description T | Improve this Doc View Source OnEntityBuilt(T) Declaration protected void OnEntityBuilt(T entity) Parameters Type Name Description T entity | Improve this Doc View Source OnInit() Declaration protected override void OnInit() Overrides AbstractSavableModel.OnInit() | Improve this Doc View Source RemoveEntity(string) Declaration public bool RemoveEntity(string id) Parameters Type Name Description string id Returns Type Description bool Implements IEntityModel<T> IEntityModel MikroFramework.Architecture.IModel MikroFramework.Architecture.ICanSetArchitecture MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.ICanSendEvent MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Runtime.DataFramework.Entities.EntityPropertyDependencyCache.html": {
    "href": "api/Runtime.DataFramework.Entities.EntityPropertyDependencyCache.html",
    "title": "Class EntityPropertyDependencyCache | Example Unity documentation",
    "keywords": "Class EntityPropertyDependencyCache Inheritance object EntityPropertyDependencyCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public static class EntityPropertyDependencyCache Methods | Improve this Doc View Source ClearCache() Declaration public static void ClearCache() | Improve this Doc View Source GetInitializationOrder(string, Dictionary<string, IPropertyBase>) Declaration public static List<string> GetInitializationOrder(string EntityName, Dictionary<string, IPropertyBase> Properties) Parameters Type Name Description string EntityName Dictionary<string, IPropertyBase> Properties Returns Type Description List<string>"
  },
  "api/Runtime.DataFramework.Entities.ICommonEntityModel.html": {
    "href": "api/Runtime.DataFramework.Entities.ICommonEntityModel.html",
    "title": "Interface ICommonEntityModel | Example Unity documentation",
    "keywords": "Interface ICommonEntityModel Inherited Members IEntityModel<IEntity>.GetEntity(string) IEntityModel.RemoveEntity(string) IEntityModel.EntityCount IModel.Init() ICanSetArchitecture.SetArchitecture(IArchitecture) IBelongToArchitecture.GetArchitecture() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public interface ICommonEntityModel : IEntityModel<IEntity>, IEntityModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture Methods | Improve this Doc View Source GetBuilder<TEntity>(int, bool) Get the BasicEntityBuilder for the entity type Declaration BasicEntityBuilder<TEntity> GetBuilder<TEntity>(int rarity, bool addToModelOnceBuilt = true) where TEntity : class, IEntity, new() Parameters Type Name Description int rarity bool addToModelOnceBuilt Returns Type Description BasicEntityBuilder<TEntity> Type Parameters Name Description TEntity | Improve this Doc View Source GetBuilder<TBuilder, TEntity>(int, bool) Get the general builder for the entity type Declaration TBuilder GetBuilder<TBuilder, TEntity>(int rarity, bool addToModelOnceBuilt = true) where TBuilder : EntityBuilder<TBuilder, TEntity> where TEntity : class, IEntity, new() Parameters Type Name Description int rarity bool addToModelOnceBuilt Once the entity is built, add it to the model Returns Type Description TBuilder Type Parameters Name Description TBuilder The type of the builder you want to use You need to make sure that builder is okay to build the target entity TEntity | Improve this Doc View Source GetEntity<T>(string) Declaration T GetEntity<T>(string id) where T : class, IEntity Parameters Type Name Description string id Returns Type Description T Type Parameters Name Description T"
  },
  "api/Runtime.DataFramework.Entities.IEntity.html": {
    "href": "api/Runtime.DataFramework.Entities.IEntity.html",
    "title": "Interface IEntity | Example Unity documentation",
    "keywords": "Interface IEntity Inherited Members IPoolable.OnRecycled() IPoolable.IsRecycled IPoolable.RecycleToCache() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public interface IEntity : IPoolable Properties | Improve this Doc View Source EntityName Declaration string EntityName { get; } Property Value Type Description string | Improve this Doc View Source UUID Declaration string UUID { get; } Property Value Type Description string Methods | Improve this Doc View Source GetProperty(PropertyName) Get a property by name, return null if not found This will not retrieve those nested properties (in PropertyDict, PropertyList, etc.) To retrieve nested properties, use the one that takes full name instead Declaration IPropertyBase GetProperty(PropertyName name) Parameters Type Name Description PropertyName name Returns Type Description IPropertyBase | Improve this Doc View Source GetProperty(PropertyNameInfo) Get a property by full name, return null if not found This can retrieve those nested properties (in PropertyDict, PropertyList, etc.) e.g. GetProperty(\"custom_properties.attack.damage\") Declaration IPropertyBase GetProperty(PropertyNameInfo name) Parameters Type Name Description PropertyNameInfo name Returns Type Description IPropertyBase | Improve this Doc View Source GetProperty(Type) Return a property if you know its type, return null if not found This will not retrieve those nested properties (in PropertyDict, PropertyList, etc.) To retrieve nested properties, use the one that takes full name instead Declaration IPropertyBase GetProperty(Type type) Parameters Type Name Description Type type Returns Type Description IPropertyBase | Improve this Doc View Source GetProperty<T>() Return a property if you know its type, return null if not found This will not retrieve those nested properties (in PropertyDict, PropertyList, etc.) To retrieve nested properties, use the one that takes full name instead Declaration T GetProperty<T>() where T : class, IPropertyBase Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetProperty<T>(PropertyNameInfo) Get a property by full name, return null if not found This can retrieve those nested properties (in PropertyDict, PropertyList, etc.) This will auto convert the property to the given type Declaration T GetProperty<T>(PropertyNameInfo name) where T : class, IPropertyBase Parameters Type Name Description PropertyNameInfo name Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source HasProperty(PropertyNameInfo) Declaration bool HasProperty(PropertyNameInfo nameInfo) Parameters Type Name Description PropertyNameInfo nameInfo Returns Type Description bool | Improve this Doc View Source Initialize() Declaration void Initialize() | Improve this Doc View Source LoadPropertyBaseValueFromConfig() Declaration void LoadPropertyBaseValueFromConfig() | Improve this Doc View Source OnAllocate() Declaration void OnAllocate() | Improve this Doc View Source OnLoadFromSave() Declaration void OnLoadFromSave() | Improve this Doc View Source RegisterInitialProperty<T>(T) Register a property to the entity. This must be called before the entity is initialized To register a property after the entity is initialized, use RegisterTempProperty Declaration void RegisterInitialProperty<T>(T property) where T : IPropertyBase Parameters Type Name Description T property Type Parameters Name Description T | Improve this Doc View Source RegisterTempProperty<T>(T, string, bool, bool) Register a property to the entity. The property will be removed once the entity is recycled Declaration void RegisterTempProperty<T>(T property, string overriddenName, bool isRoot, bool alsoInitialize = true) where T : IPropertyBase Parameters Type Name Description T property string overriddenName bool isRoot bool alsoInitialize Type Parameters Name Description T | Improve this Doc View Source SetPropertyBaseValue<T>(PropertyNameInfo, T, IPropertyDependencyModifier<T>) Set the base value of all properties with the given name Declaration void SetPropertyBaseValue<T>(PropertyNameInfo name, T value, IPropertyDependencyModifier<T> modifier = null) Parameters Type Name Description PropertyNameInfo name T value IPropertyDependencyModifier<T> modifier Type Parameters Name Description T | Improve this Doc View Source SetPropertyModifier<T>(PropertyNameInfo, IPropertyDependencyModifier<T>) Set the modifier of all properties with the given name Declaration void SetPropertyModifier<T>(PropertyNameInfo name, IPropertyDependencyModifier<T> modifier) Parameters Type Name Description PropertyNameInfo name IPropertyDependencyModifier<T> modifier Type Parameters Name Description T | Improve this Doc View Source TryGetProperty(PropertyNameInfo, out IPropertyBase) Declaration bool TryGetProperty(PropertyNameInfo nameInfo, out IPropertyBase property) Parameters Type Name Description PropertyNameInfo nameInfo IPropertyBase property Returns Type Description bool"
  },
  "api/Runtime.DataFramework.Entities.IEntityModel-1.html": {
    "href": "api/Runtime.DataFramework.Entities.IEntityModel-1.html",
    "title": "Interface IEntityModel<T> | Example Unity documentation",
    "keywords": "Interface IEntityModel<T> Inherited Members IEntityModel.RemoveEntity(string) IEntityModel.EntityCount IModel.Init() ICanSetArchitecture.SetArchitecture(IArchitecture) IBelongToArchitecture.GetArchitecture() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public interface IEntityModel<T> : IEntityModel, IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture where T : IEntity Type Parameters Name Description T Methods | Improve this Doc View Source GetEntity(string) Declaration T GetEntity(string id) Parameters Type Name Description string id Returns Type Description T"
  },
  "api/Runtime.DataFramework.Entities.IEntityModel.html": {
    "href": "api/Runtime.DataFramework.Entities.IEntityModel.html",
    "title": "Interface IEntityModel | Example Unity documentation",
    "keywords": "Interface IEntityModel Inherited Members IModel.Init() ICanSetArchitecture.SetArchitecture(IArchitecture) IBelongToArchitecture.GetArchitecture() Namespace: Runtime.DataFramework.Entities Assembly: MainGame.dll Syntax public interface IEntityModel : IModel, ICanSetArchitecture, ICanGetUtility, ICanSendEvent, IBelongToArchitecture Properties | Improve this Doc View Source EntityCount Declaration int EntityCount { get; } Property Value Type Description int Methods | Improve this Doc View Source GetEntity(string) Declaration IEntity GetEntity(string id) Parameters Type Name Description string id Returns Type Description IEntity | Improve this Doc View Source RemoveEntity(string) Declaration bool RemoveEntity(string id) Parameters Type Name Description string id Returns Type Description bool"
  },
  "api/Runtime.DataFramework.Entities.html": {
    "href": "api/Runtime.DataFramework.Entities.html",
    "title": "Namespace Runtime.DataFramework.Entities | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Entities Namespaces Runtime.DataFramework.Entities.Builders Runtime.DataFramework.Entities.ClassifiedTemplates Runtime.DataFramework.Entities.Enemies Classes CommonEntityModel Entity EntityModel<T> EntityPropertyDependencyCache Interfaces ICommonEntityModel IEntity IEntityModel IEntityModel<T>"
  },
  "api/Runtime.DataFramework.Properties.AbstractLoadFromConfigProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.AbstractLoadFromConfigProperty-1.html",
    "title": "Class AbstractLoadFromConfigProperty<T> | Example Unity documentation",
    "keywords": "Class AbstractLoadFromConfigProperty<T> Inheritance object Property<T> AbstractLoadFromConfigProperty<T> AttackRange Danger Health Vigiliance Implements IProperty<T> ILoadFromConfigProperty IPropertyBase Inherited Members Property<T>.PropertyName Property<T>.fullName Property<T>.BaseValue Property<T>.InitialValue Property<T>.RealValue Property<T>.overrideDependentProperties Property<T>.SetBaseValue(T) Property<T>.OnSetFullName(string) Property<T>.GetFullName() Property<T>.modifier Property<T>.OnRecycled() Property<T>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<T>.GetDefautModifier() Property<T>.GetPropertyName() Property<T>.GetDefaultDependentProperties() Property<T>.GetDependentProperties() Property<T>.SetDependentProperties(params PropertyNameInfo[]) Property<T>.Initialize(IPropertyBase[], string) Property<T>.OnClone(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class AbstractLoadFromConfigProperty<T> : Property<T>, IProperty<T>, ILoadFromConfigProperty, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source AbstractLoadFromConfigProperty() Declaration public AbstractLoadFromConfigProperty() Methods | Improve this Doc View Source LoadFromConfig(dynamic) Declaration public void LoadFromConfig(dynamic value) Parameters Type Name Description dynamic value | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public abstract T OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description T Implements IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.AttackRange.html": {
    "href": "api/Runtime.DataFramework.Properties.AttackRange.html",
    "title": "Class AttackRange | Example Unity documentation",
    "keywords": "Class AttackRange Inheritance object Property<float> AbstractLoadFromConfigProperty<float> AttackRange Implements IAttackRangeProperty IProperty<float> ILoadFromConfigProperty IPropertyBase Inherited Members AbstractLoadFromConfigProperty<float>.LoadFromConfig(dynamic) Property<float>.PropertyName Property<float>.fullName Property<float>.BaseValue Property<float>.InitialValue Property<float>.RealValue Property<float>.overrideDependentProperties Property<float>.SetBaseValue(float) Property<float>.OnSetFullName(string) Property<float>.GetFullName() Property<float>.modifier Property<float>.OnRecycled() Property<float>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<float>.GetDependentProperties() Property<float>.SetDependentProperties(params PropertyNameInfo[]) Property<float>.Initialize(IPropertyBase[], string) Property<float>.OnClone(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class AttackRange : AbstractLoadFromConfigProperty<float>, IAttackRangeProperty, IProperty<float>, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<float>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<float> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<float> Overrides Property<float>.GetDefautModifier() | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<float>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override float OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description float Overrides AbstractLoadFromConfigProperty<float>.OnSetBaseValueFromConfig(dynamic) Implements IAttackRangeProperty IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.AttackRangeDefaultModifier.html": {
    "href": "api/Runtime.DataFramework.Properties.AttackRangeDefaultModifier.html",
    "title": "Class AttackRangeDefaultModifier | Example Unity documentation",
    "keywords": "Class AttackRangeDefaultModifier Inheritance object PropertyDependencyModifier<float> AttackRangeDefaultModifier Implements IPropertyDependencyModifier<float> Inherited Members PropertyDependencyModifier<float>.dependenciesInType PropertyDependencyModifier<float>.Modify(float, IPropertyBase[], string, string) PropertyDependencyModifier<float>.GetModifierParameterFromConfig<T>(string, T) PropertyDependencyModifier<float>.GetDependency<T>(PropertyNameInfo) PropertyDependencyModifier<float>.GetDependency(PropertyNameInfo) PropertyDependencyModifier<float>.GetDependency<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class AttackRangeDefaultModifier : PropertyDependencyModifier<float>, IPropertyDependencyModifier<float> Methods | Improve this Doc View Source OnModify(float) Declaration public override float OnModify(float propertyValue) Parameters Type Name Description float propertyValue Returns Type Description float Overrides PropertyDependencyModifier<float>.OnModify(float) Implements IPropertyDependencyModifier<T>"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.AutoConfigCustomProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.AutoConfigCustomProperty.html",
    "title": "Class AutoConfigCustomProperty | Example Unity documentation",
    "keywords": "Class AutoConfigCustomProperty If you don't want to manually specify custom property data, you can use this class to create a Custom property. However, this class is data only, which means you can't set any default modifiers for any Custom data (although you can use the builder to override, but the generic type of your modifier MUST BE dynamic in this case!!). Also, data is only loaded from config file. Moreover, all Custom data in the config file will be automatically loaded into this class, with type of dynamic. To customize the description of this Custom, you need to assign a data only Custom description getter. This is particularly useful if ALL of its data is primitive type, and you don't want to manually specify them. If any of its data is complex type, the complex data will be a dynamic object (ExpandoObject). So it's better to use CustomProperty instead. Inheritance object Property<Dictionary<string, ICustomDataProperty>> PropertyDictionary<string, ICustomDataProperty> CustomProperty AutoConfigCustomProperty Implements ICustomProperty IPropertyDictionary<string, ICustomDataProperty> IDictionaryProperty<string, ICustomDataProperty> IProperty<Dictionary<string, ICustomDataProperty>> IHaveSubProperties IPropertyBase Inherited Members CustomProperty.propertyName CustomProperty.descriptionGetter CustomProperty.GetDefautModifier() CustomProperty.GetPropertyName() CustomProperty.GetDefaultDependentProperties() CustomProperty.GetKey(ICustomDataProperty) CustomProperty.GetCustomDataValue(string) CustomProperty.GetCustomDataValue<T>(string) CustomProperty.GetCustomPropertyName() CustomProperty.OnGetDescription() CustomProperty.GetCustomDataProperty(string) CustomProperty.GetCustomDataProperty<T>(string) CustomProperty.RegisterOnCustomDataChanged(string, Action<ICustomDataProperty, dynamic, dynamic>) CustomProperty.RegisterOnCustomDataChanged(Action<ICustomProperty>) CustomProperty.UnRegisterOnCustomDataChanged(string, Action<ICustomDataProperty, dynamic, dynamic>) CustomProperty.UnRegisterOnCustomDataChanged(Action<ICustomProperty>) CustomProperty.Initialize(IPropertyBase[], string) CustomProperty.OnLoadFromSavedData() PropertyDictionary<string, ICustomDataProperty>.BaseValue PropertyDictionary<string, ICustomDataProperty>.RealValue PropertyDictionary<string, ICustomDataProperty>.RealValues PropertyDictionary<string, ICustomDataProperty>.InitialValue PropertyDictionary<string, ICustomDataProperty>.GetKey(ICustomDataProperty) PropertyDictionary<string, ICustomDataProperty>.OnLoadFromSavedData() PropertyDictionary<string, ICustomDataProperty>.SetBaseValue(Dictionary<string, ICustomDataProperty>) PropertyDictionary<string, ICustomDataProperty>.OnSetChildFullName() PropertyDictionary<string, ICustomDataProperty>.AddToRealValue(ICustomDataProperty) PropertyDictionary<string, ICustomDataProperty>.RemoveFromRealValue(string) PropertyDictionary<string, ICustomDataProperty>.OnClone(Dictionary<string, ICustomDataProperty>) PropertyDictionary<string, ICustomDataProperty>.Initialize(IPropertyBase[], string) PropertyDictionary<string, ICustomDataProperty>.GetChildProperties() PropertyDictionary<string, ICustomDataProperty>.requestRegisterProperty PropertyDictionary<string, ICustomDataProperty>.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<string, ICustomDataProperty>.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<string, ICustomDataProperty>.GetDefaultDependentProperties() PropertyDictionary<string, ICustomDataProperty>.OnRecycled() Property<Dictionary<string, ICustomDataProperty>>.PropertyName Property<Dictionary<string, ICustomDataProperty>>.fullName Property<Dictionary<string, ICustomDataProperty>>.BaseValue Property<Dictionary<string, ICustomDataProperty>>.InitialValue Property<Dictionary<string, ICustomDataProperty>>.RealValue Property<Dictionary<string, ICustomDataProperty>>.overrideDependentProperties Property<Dictionary<string, ICustomDataProperty>>.SetBaseValue(Dictionary<string, ICustomDataProperty>) Property<Dictionary<string, ICustomDataProperty>>.OnSetFullName(string) Property<Dictionary<string, ICustomDataProperty>>.GetFullName() Property<Dictionary<string, ICustomDataProperty>>.modifier Property<Dictionary<string, ICustomDataProperty>>.OnRecycled() Property<Dictionary<string, ICustomDataProperty>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<string, ICustomDataProperty>>.GetDefautModifier() Property<Dictionary<string, ICustomDataProperty>>.GetPropertyName() Property<Dictionary<string, ICustomDataProperty>>.GetDefaultDependentProperties() Property<Dictionary<string, ICustomDataProperty>>.GetDependentProperties() Property<Dictionary<string, ICustomDataProperty>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<string, ICustomDataProperty>>.Initialize(IPropertyBase[], string) Property<Dictionary<string, ICustomDataProperty>>.OnClone(Dictionary<string, ICustomDataProperty>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public class AutoConfigCustomProperty : CustomProperty, ICustomProperty, IPropertyDictionary<string, ICustomDataProperty>, IDictionaryProperty<string, ICustomDataProperty>, IProperty<Dictionary<string, ICustomDataProperty>>, IHaveSubProperties, IPropertyBase Constructors | Improve this Doc View Source AutoConfigCustomProperty() Declaration public AutoConfigCustomProperty() | Improve this Doc View Source AutoConfigCustomProperty(string, IDescriptionGetter) Declaration public AutoConfigCustomProperty(string CustomName, IDescriptionGetter descriptionGetter = null) Parameters Type Name Description string CustomName IDescriptionGetter descriptionGetter Methods | Improve this Doc View Source OnGetBaseValueFromConfig(dynamic) Declaration public override Dictionary<string, ICustomDataProperty> OnGetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<string, ICustomDataProperty> Overrides CustomProperty.OnGetBaseValueFromConfig(dynamic) | Improve this Doc View Source OnRecycled() Declaration public override void OnRecycled() Overrides CustomProperty.OnRecycled() Implements ICustomProperty IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<T> IHaveSubProperties IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.CustomDataProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.CustomDataProperty-1.html",
    "title": "Class CustomDataProperty<T> | Example Unity documentation",
    "keywords": "Class CustomDataProperty<T> Inheritance object Property<T> CustomDataProperty<T> Implements ICustomDataProperty<T> ICustomDataProperty IProperty<T> IPropertyBase Inherited Members Property<T>.PropertyName Property<T>.fullName Property<T>.BaseValue Property<T>.InitialValue Property<T>.RealValue Property<T>.overrideDependentProperties Property<T>.SetBaseValue(T) Property<T>.OnSetFullName(string) Property<T>.GetFullName() Property<T>.modifier Property<T>.OnRecycled() Property<T>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<T>.GetDependentProperties() Property<T>.SetDependentProperties(params PropertyNameInfo[]) Property<T>.Initialize(IPropertyBase[], string) Property<T>.OnClone(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public class CustomDataProperty<T> : Property<T>, ICustomDataProperty<T>, ICustomDataProperty, IProperty<T>, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source CustomDataProperty() Declaration public CustomDataProperty() | Improve this Doc View Source CustomDataProperty(string, IPropertyDependencyModifier<T>, PropertyNameInfo[]) Declaration public CustomDataProperty(string customDataName, IPropertyDependencyModifier<T> modifier = null, PropertyNameInfo[] defaultDependencies = null) Parameters Type Name Description string customDataName IPropertyDependencyModifier<T> modifier PropertyNameInfo[] defaultDependencies Fields | Improve this Doc View Source defaultDependencies Declaration protected PropertyNameInfo[] defaultDependencies Field Value Type Description PropertyNameInfo[] Properties | Improve this Doc View Source CustomDataName Declaration public string CustomDataName { get; } Property Value Type Description string Methods | Improve this Doc View Source ConvertJTokenToBaseValue(JToken) Declaration protected dynamic ConvertJTokenToBaseValue(JToken token) Parameters Type Name Description JToken token Returns Type Description dynamic | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<T>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<T> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<T> Overrides Property<T>.GetDefautModifier() | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<T>.GetPropertyName() | Improve this Doc View Source OnGetBaseValueFromConfig(dynamic) Declaration public T OnGetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description T Implements ICustomDataProperty<T> ICustomDataProperty IProperty<T> IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.CustomProperties.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.CustomProperties.html",
    "title": "Class CustomProperties | Example Unity documentation",
    "keywords": "Class CustomProperties Structure: CustomsProperty -> CustomProperty[] -> CustomDataProperty[] Inheritance object Property<Dictionary<string, ICustomProperty>> PropertyDictionary<string, ICustomProperty> PropertyDictionaryLoadFromConfig<string, ICustomProperty> CustomProperties Implements ICustomProperties IPropertyDictionary<string, ICustomProperty> IDictionaryProperty<string, ICustomProperty> IProperty<Dictionary<string, ICustomProperty>> IHaveSubProperties ILoadFromConfigProperty IPropertyBase Inherited Members PropertyDictionaryLoadFromConfig<string, ICustomProperty>.LoadFromConfig(dynamic) PropertyDictionaryLoadFromConfig<string, ICustomProperty>.OnSetBaseValueFromConfig(dynamic) PropertyDictionary<string, ICustomProperty>.BaseValue PropertyDictionary<string, ICustomProperty>.RealValue PropertyDictionary<string, ICustomProperty>.RealValues PropertyDictionary<string, ICustomProperty>.InitialValue PropertyDictionary<string, ICustomProperty>.GetKey(ICustomProperty) PropertyDictionary<string, ICustomProperty>.OnLoadFromSavedData() PropertyDictionary<string, ICustomProperty>.SetBaseValue(Dictionary<string, ICustomProperty>) PropertyDictionary<string, ICustomProperty>.OnSetChildFullName() PropertyDictionary<string, ICustomProperty>.AddToRealValue(ICustomProperty) PropertyDictionary<string, ICustomProperty>.RemoveFromRealValue(string) PropertyDictionary<string, ICustomProperty>.OnClone(Dictionary<string, ICustomProperty>) PropertyDictionary<string, ICustomProperty>.Initialize(IPropertyBase[], string) PropertyDictionary<string, ICustomProperty>.GetChildProperties() PropertyDictionary<string, ICustomProperty>.requestRegisterProperty PropertyDictionary<string, ICustomProperty>.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<string, ICustomProperty>.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<string, ICustomProperty>.GetDefaultDependentProperties() PropertyDictionary<string, ICustomProperty>.OnRecycled() Property<Dictionary<string, ICustomProperty>>.PropertyName Property<Dictionary<string, ICustomProperty>>.fullName Property<Dictionary<string, ICustomProperty>>.BaseValue Property<Dictionary<string, ICustomProperty>>.InitialValue Property<Dictionary<string, ICustomProperty>>.RealValue Property<Dictionary<string, ICustomProperty>>.overrideDependentProperties Property<Dictionary<string, ICustomProperty>>.SetBaseValue(Dictionary<string, ICustomProperty>) Property<Dictionary<string, ICustomProperty>>.OnSetFullName(string) Property<Dictionary<string, ICustomProperty>>.GetFullName() Property<Dictionary<string, ICustomProperty>>.modifier Property<Dictionary<string, ICustomProperty>>.OnRecycled() Property<Dictionary<string, ICustomProperty>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<string, ICustomProperty>>.GetDefautModifier() Property<Dictionary<string, ICustomProperty>>.GetPropertyName() Property<Dictionary<string, ICustomProperty>>.GetDefaultDependentProperties() Property<Dictionary<string, ICustomProperty>>.GetDependentProperties() Property<Dictionary<string, ICustomProperty>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<string, ICustomProperty>>.Initialize(IPropertyBase[], string) Property<Dictionary<string, ICustomProperty>>.OnClone(Dictionary<string, ICustomProperty>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public class CustomProperties : PropertyDictionaryLoadFromConfig<string, ICustomProperty>, ICustomProperties, IPropertyDictionary<string, ICustomProperty>, IDictionaryProperty<string, ICustomProperty>, IProperty<Dictionary<string, ICustomProperty>>, IHaveSubProperties, ILoadFromConfigProperty, IPropertyBase Constructors | Improve this Doc View Source CustomProperties() Please use CustomsProperty(params ICustomProperty[] Customs) to register all Customs at once Declaration public CustomProperties() | Improve this Doc View Source CustomProperties(params ICustomProperty[]) Declaration public CustomProperties(params ICustomProperty[] Customs) Parameters Type Name Description ICustomProperty[] Customs Methods | Improve this Doc View Source GetCustomProperty(string) Declaration public ICustomProperty GetCustomProperty(string key) Parameters Type Name Description string key Returns Type Description ICustomProperty | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides PropertyDictionary<string, ICustomProperty>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<Dictionary<string, ICustomProperty>> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<Dictionary<string, ICustomProperty>> Overrides Property<Dictionary<string, ICustomProperty>>.GetDefautModifier() | Improve this Doc View Source GetKey(ICustomProperty) Declaration public override string GetKey(ICustomProperty value) Parameters Type Name Description ICustomProperty value Returns Type Description string Overrides PropertyDictionary<string, ICustomProperty>.GetKey(ICustomProperty) | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<Dictionary<string, ICustomProperty>>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override Dictionary<string, ICustomProperty> OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<string, ICustomProperty> Overrides PropertyDictionaryLoadFromConfig<string, ICustomProperty>.OnSetBaseValueFromConfig(dynamic) Implements ICustomProperties IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<T> IHaveSubProperties ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.CustomProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.CustomProperty.html",
    "title": "Class CustomProperty | Example Unity documentation",
    "keywords": "Class CustomProperty Inheritance object Property<Dictionary<string, ICustomDataProperty>> PropertyDictionary<string, ICustomDataProperty> CustomProperty AutoConfigCustomProperty Implements ICustomProperty IPropertyDictionary<string, ICustomDataProperty> IDictionaryProperty<string, ICustomDataProperty> IProperty<Dictionary<string, ICustomDataProperty>> IHaveSubProperties IPropertyBase Inherited Members PropertyDictionary<string, ICustomDataProperty>.BaseValue PropertyDictionary<string, ICustomDataProperty>.RealValue PropertyDictionary<string, ICustomDataProperty>.RealValues PropertyDictionary<string, ICustomDataProperty>.InitialValue PropertyDictionary<string, ICustomDataProperty>.GetKey(ICustomDataProperty) PropertyDictionary<string, ICustomDataProperty>.OnLoadFromSavedData() PropertyDictionary<string, ICustomDataProperty>.SetBaseValue(Dictionary<string, ICustomDataProperty>) PropertyDictionary<string, ICustomDataProperty>.OnSetChildFullName() PropertyDictionary<string, ICustomDataProperty>.AddToRealValue(ICustomDataProperty) PropertyDictionary<string, ICustomDataProperty>.RemoveFromRealValue(string) PropertyDictionary<string, ICustomDataProperty>.OnClone(Dictionary<string, ICustomDataProperty>) PropertyDictionary<string, ICustomDataProperty>.Initialize(IPropertyBase[], string) PropertyDictionary<string, ICustomDataProperty>.GetChildProperties() PropertyDictionary<string, ICustomDataProperty>.requestRegisterProperty PropertyDictionary<string, ICustomDataProperty>.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<string, ICustomDataProperty>.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<string, ICustomDataProperty>.GetDefaultDependentProperties() PropertyDictionary<string, ICustomDataProperty>.OnRecycled() Property<Dictionary<string, ICustomDataProperty>>.PropertyName Property<Dictionary<string, ICustomDataProperty>>.fullName Property<Dictionary<string, ICustomDataProperty>>.BaseValue Property<Dictionary<string, ICustomDataProperty>>.InitialValue Property<Dictionary<string, ICustomDataProperty>>.RealValue Property<Dictionary<string, ICustomDataProperty>>.overrideDependentProperties Property<Dictionary<string, ICustomDataProperty>>.SetBaseValue(Dictionary<string, ICustomDataProperty>) Property<Dictionary<string, ICustomDataProperty>>.OnSetFullName(string) Property<Dictionary<string, ICustomDataProperty>>.GetFullName() Property<Dictionary<string, ICustomDataProperty>>.modifier Property<Dictionary<string, ICustomDataProperty>>.OnRecycled() Property<Dictionary<string, ICustomDataProperty>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<string, ICustomDataProperty>>.GetDefautModifier() Property<Dictionary<string, ICustomDataProperty>>.GetPropertyName() Property<Dictionary<string, ICustomDataProperty>>.GetDefaultDependentProperties() Property<Dictionary<string, ICustomDataProperty>>.GetDependentProperties() Property<Dictionary<string, ICustomDataProperty>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<string, ICustomDataProperty>>.Initialize(IPropertyBase[], string) Property<Dictionary<string, ICustomDataProperty>>.OnClone(Dictionary<string, ICustomDataProperty>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public class CustomProperty : PropertyDictionary<string, ICustomDataProperty>, ICustomProperty, IPropertyDictionary<string, ICustomDataProperty>, IDictionaryProperty<string, ICustomDataProperty>, IProperty<Dictionary<string, ICustomDataProperty>>, IHaveSubProperties, IPropertyBase Constructors | Improve this Doc View Source CustomProperty() Declaration public CustomProperty() | Improve this Doc View Source CustomProperty(string, IDescriptionGetter, params ICustomDataProperty[]) Declaration public CustomProperty(string propertyName, IDescriptionGetter descriptionGetter, params ICustomDataProperty[] data) Parameters Type Name Description string propertyName The name of the property. This should be the same as the one on the config file IDescriptionGetter descriptionGetter In order to serialize the description, you need to use a descriptionGetter object to do the description stuff ICustomDataProperty[] data Manually specify which data are included, as well as their dependencies and modifiers Fields | Improve this Doc View Source descriptionGetter Declaration protected IDescriptionGetter descriptionGetter Field Value Type Description IDescriptionGetter | Improve this Doc View Source propertyName Declaration protected string propertyName Field Value Type Description string Methods | Improve this Doc View Source GetCustomDataProperty(string) Declaration public ICustomDataProperty GetCustomDataProperty(string customDataName) Parameters Type Name Description string customDataName Returns Type Description ICustomDataProperty | Improve this Doc View Source GetCustomDataProperty<T>(string) Declaration public ICustomDataProperty<T> GetCustomDataProperty<T>(string customDataName) Parameters Type Name Description string customDataName Returns Type Description ICustomDataProperty<T> Type Parameters Name Description T | Improve this Doc View Source GetCustomDataValue(string) Declaration public IBindableProperty GetCustomDataValue(string customDataName) Parameters Type Name Description string customDataName Returns Type Description IBindableProperty | Improve this Doc View Source GetCustomDataValue<T>(string) Declaration public BindableProperty<T> GetCustomDataValue<T>(string CustomDataName) Parameters Type Name Description string CustomDataName Returns Type Description BindableProperty<T> Type Parameters Name Description T | Improve this Doc View Source GetCustomPropertyName() Declaration public string GetCustomPropertyName() Returns Type Description string | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides PropertyDictionary<string, ICustomDataProperty>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<Dictionary<string, ICustomDataProperty>> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<Dictionary<string, ICustomDataProperty>> Overrides Property<Dictionary<string, ICustomDataProperty>>.GetDefautModifier() | Improve this Doc View Source GetKey(ICustomDataProperty) Declaration public override string GetKey(ICustomDataProperty value) Parameters Type Name Description ICustomDataProperty value Returns Type Description string Overrides PropertyDictionary<string, ICustomDataProperty>.GetKey(ICustomDataProperty) | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<Dictionary<string, ICustomDataProperty>>.GetPropertyName() | Improve this Doc View Source Initialize(IPropertyBase[], string) Declaration public override void Initialize(IPropertyBase[] dependencies, string parentEntityName) Parameters Type Name Description IPropertyBase[] dependencies string parentEntityName Overrides PropertyDictionary<string, ICustomDataProperty>.Initialize(IPropertyBase[], string) | Improve this Doc View Source OnGetBaseValueFromConfig(dynamic) Declaration public virtual Dictionary<string, ICustomDataProperty> OnGetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<string, ICustomDataProperty> | Improve this Doc View Source OnGetDescription() Declaration public string OnGetDescription() Returns Type Description string | Improve this Doc View Source OnLoadFromSavedData() Declaration public void OnLoadFromSavedData() | Improve this Doc View Source OnRecycled() Declaration public override void OnRecycled() Overrides PropertyDictionary<string, ICustomDataProperty>.OnRecycled() | Improve this Doc View Source RegisterOnCustomDataChanged(Action<ICustomProperty>) Declaration public IUnRegister RegisterOnCustomDataChanged(Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description Action<ICustomProperty> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source RegisterOnCustomDataChanged(string, Action<ICustomDataProperty, dynamic, dynamic>) Declaration public IUnRegister RegisterOnCustomDataChanged(string CustomDataName, Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged) Parameters Type Name Description string CustomDataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source UnRegisterOnCustomDataChanged(Action<ICustomProperty>) Declaration public void UnRegisterOnCustomDataChanged(Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description Action<ICustomProperty> onCustomDataChanged | Improve this Doc View Source UnRegisterOnCustomDataChanged(string, Action<ICustomDataProperty, dynamic, dynamic>) Declaration public void UnRegisterOnCustomDataChanged(string CustomDataName, Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged) Parameters Type Name Description string CustomDataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged Implements ICustomProperty IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<T> IHaveSubProperties IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.ICustomDataProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.ICustomDataProperty-1.html",
    "title": "Interface ICustomDataProperty<T> | Example Unity documentation",
    "keywords": "Interface ICustomDataProperty<T> Inherited Members ICustomDataProperty.CustomDataName IProperty<T>.BaseValue IProperty<T>.InitialValue IProperty<T>.RealValue IProperty<T>.SetBaseValue(T) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public interface ICustomDataProperty<T> : ICustomDataProperty, IProperty<T>, IPropertyBase Type Parameters Name Description T Methods | Improve this Doc View Source OnGetBaseValueFromConfig(dynamic) Declaration T OnGetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description T"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.ICustomDataProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.ICustomDataProperty.html",
    "title": "Interface ICustomDataProperty | Example Unity documentation",
    "keywords": "Interface ICustomDataProperty Inherited Members IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public interface ICustomDataProperty : IPropertyBase Properties | Improve this Doc View Source CustomDataName Declaration string CustomDataName { get; } Property Value Type Description string Methods | Improve this Doc View Source OnGetBaseValueFromConfig(dynamic) Declaration dynamic OnGetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description dynamic"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.ICustomProperties.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.ICustomProperties.html",
    "title": "Interface ICustomProperties | Example Unity documentation",
    "keywords": "Interface ICustomProperties Inherited Members IPropertyDictionary<string, ICustomProperty>.GetKey(ICustomProperty) IPropertyDictionary<string, ICustomProperty>.AddToRealValue(ICustomProperty) IPropertyDictionary<string, ICustomProperty>.RemoveFromRealValue(string) IDictionaryProperty<string, ICustomProperty>.RealValues IProperty<Dictionary<string, ICustomProperty>>.BaseValue IProperty<Dictionary<string, ICustomProperty>>.InitialValue IProperty<Dictionary<string, ICustomProperty>>.RealValue IProperty<Dictionary<string, ICustomProperty>>.SetBaseValue(Dictionary<string, ICustomProperty>) IHaveSubProperties.OnSetChildFullName() IHaveSubProperties.GetChildProperties() IHaveSubProperties.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) IHaveSubProperties.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) IHaveSubProperties.OnLoadFromSavedData() ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public interface ICustomProperties : IPropertyDictionary<string, ICustomProperty>, IDictionaryProperty<string, ICustomProperty>, IProperty<Dictionary<string, ICustomProperty>>, IHaveSubProperties, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetCustomProperty(string) Declaration ICustomProperty GetCustomProperty(string key) Parameters Type Name Description string key Returns Type Description ICustomProperty"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.ICustomProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.ICustomProperty.html",
    "title": "Interface ICustomProperty | Example Unity documentation",
    "keywords": "Interface ICustomProperty Inherited Members IPropertyDictionary<string, ICustomDataProperty>.GetKey(ICustomDataProperty) IPropertyDictionary<string, ICustomDataProperty>.AddToRealValue(ICustomDataProperty) IPropertyDictionary<string, ICustomDataProperty>.RemoveFromRealValue(string) IDictionaryProperty<string, ICustomDataProperty>.RealValues IProperty<Dictionary<string, ICustomDataProperty>>.BaseValue IProperty<Dictionary<string, ICustomDataProperty>>.InitialValue IProperty<Dictionary<string, ICustomDataProperty>>.RealValue IProperty<Dictionary<string, ICustomDataProperty>>.SetBaseValue(Dictionary<string, ICustomDataProperty>) IHaveSubProperties.OnSetChildFullName() IHaveSubProperties.GetChildProperties() IHaveSubProperties.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) IHaveSubProperties.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) IHaveSubProperties.OnLoadFromSavedData() IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public interface ICustomProperty : IPropertyDictionary<string, ICustomDataProperty>, IDictionaryProperty<string, ICustomDataProperty>, IProperty<Dictionary<string, ICustomDataProperty>>, IHaveSubProperties, IPropertyBase Methods | Improve this Doc View Source GetCustomDataProperty(string) Declaration ICustomDataProperty GetCustomDataProperty(string customDataName) Parameters Type Name Description string customDataName Returns Type Description ICustomDataProperty | Improve this Doc View Source GetCustomDataProperty<T>(string) Declaration ICustomDataProperty<T> GetCustomDataProperty<T>(string customDataName) Parameters Type Name Description string customDataName Returns Type Description ICustomDataProperty<T> Type Parameters Name Description T | Improve this Doc View Source GetCustomDataValue(string) Declaration IBindableProperty GetCustomDataValue(string customDataName) Parameters Type Name Description string customDataName Returns Type Description IBindableProperty | Improve this Doc View Source GetCustomDataValue<T>(string) Declaration BindableProperty<T> GetCustomDataValue<T>(string CustomDataName) Parameters Type Name Description string CustomDataName Returns Type Description BindableProperty<T> Type Parameters Name Description T | Improve this Doc View Source GetCustomPropertyName() Declaration string GetCustomPropertyName() Returns Type Description string | Improve this Doc View Source OnGetBaseValueFromConfig(dynamic) Declaration Dictionary<string, ICustomDataProperty> OnGetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<string, ICustomDataProperty> | Improve this Doc View Source OnGetDescription() Declaration string OnGetDescription() Returns Type Description string | Improve this Doc View Source RegisterOnCustomDataChanged(Action<ICustomProperty>) Declaration IUnRegister RegisterOnCustomDataChanged(Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description Action<ICustomProperty> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source RegisterOnCustomDataChanged(string, Action<ICustomDataProperty, dynamic, dynamic>) Declaration IUnRegister RegisterOnCustomDataChanged(string CustomDataName, Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged) Parameters Type Name Description string CustomDataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged Returns Type Description IUnRegister | Improve this Doc View Source UnRegisterOnCustomDataChanged(Action<ICustomProperty>) Declaration void UnRegisterOnCustomDataChanged(Action<ICustomProperty> onCustomDataChanged) Parameters Type Name Description Action<ICustomProperty> onCustomDataChanged | Improve this Doc View Source UnRegisterOnCustomDataChanged(string, Action<ICustomDataProperty, dynamic, dynamic>) Declaration void UnRegisterOnCustomDataChanged(string CustomDataName, Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged) Parameters Type Name Description string CustomDataName Action<ICustomDataProperty, dynamic, dynamic> onCustomDataChanged"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.IDescriptionGetter.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.IDescriptionGetter.html",
    "title": "Interface IDescriptionGetter | Example Unity documentation",
    "keywords": "Interface IDescriptionGetter Namespace: Runtime.DataFramework.Properties.CustomProperties Assembly: MainGame.dll Syntax public interface IDescriptionGetter Methods | Improve this Doc View Source GetDescription(ICustomProperty) Declaration string GetDescription(ICustomProperty customProperty) Parameters Type Name Description ICustomProperty customProperty Returns Type Description string"
  },
  "api/Runtime.DataFramework.Properties.CustomProperties.html": {
    "href": "api/Runtime.DataFramework.Properties.CustomProperties.html",
    "title": "Namespace Runtime.DataFramework.Properties.CustomProperties | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Properties.CustomProperties Classes AutoConfigCustomProperty If you don't want to manually specify custom property data, you can use this class to create a Custom property. However, this class is data only, which means you can't set any default modifiers for any Custom data (although you can use the builder to override, but the generic type of your modifier MUST BE dynamic in this case!!). Also, data is only loaded from config file. Moreover, all Custom data in the config file will be automatically loaded into this class, with type of dynamic. To customize the description of this Custom, you need to assign a data only Custom description getter. This is particularly useful if ALL of its data is primitive type, and you don't want to manually specify them. If any of its data is complex type, the complex data will be a dynamic object (ExpandoObject). So it's better to use CustomProperty instead. CustomDataProperty<T> CustomProperties Structure: CustomsProperty -> CustomProperty[] -> CustomDataProperty[] CustomProperty Interfaces ICustomDataProperty ICustomDataProperty<T> ICustomProperties ICustomProperty IDescriptionGetter"
  },
  "api/Runtime.DataFramework.Properties.Danger.html": {
    "href": "api/Runtime.DataFramework.Properties.Danger.html",
    "title": "Class Danger | Example Unity documentation",
    "keywords": "Class Danger Inheritance object Property<int> AbstractLoadFromConfigProperty<int> Danger Implements IDangerProperty IProperty<int> ILoadFromConfigProperty IPropertyBase Inherited Members AbstractLoadFromConfigProperty<int>.LoadFromConfig(dynamic) Property<int>.PropertyName Property<int>.fullName Property<int>.BaseValue Property<int>.InitialValue Property<int>.RealValue Property<int>.overrideDependentProperties Property<int>.SetBaseValue(int) Property<int>.OnSetFullName(string) Property<int>.GetFullName() Property<int>.modifier Property<int>.OnRecycled() Property<int>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<int>.GetDependentProperties() Property<int>.SetDependentProperties(params PropertyNameInfo[]) Property<int>.Initialize(IPropertyBase[], string) Property<int>.OnClone(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class Danger : AbstractLoadFromConfigProperty<int>, IDangerProperty, IProperty<int>, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<int>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<int> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<int> Overrides Property<int>.GetDefautModifier() | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<int>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override int OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description int Overrides AbstractLoadFromConfigProperty<int>.OnSetBaseValueFromConfig(dynamic) Implements IDangerProperty IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.DangerDefaultModifier.html": {
    "href": "api/Runtime.DataFramework.Properties.DangerDefaultModifier.html",
    "title": "Class DangerDefaultModifier | Example Unity documentation",
    "keywords": "Class DangerDefaultModifier Inheritance object PropertyDependencyModifier<int> DangerDefaultModifier Implements IPropertyDependencyModifier<int> Inherited Members PropertyDependencyModifier<int>.dependenciesInType PropertyDependencyModifier<int>.Modify(int, IPropertyBase[], string, string) PropertyDependencyModifier<int>.GetModifierParameterFromConfig<T>(string, T) PropertyDependencyModifier<int>.GetDependency<T>(PropertyNameInfo) PropertyDependencyModifier<int>.GetDependency(PropertyNameInfo) PropertyDependencyModifier<int>.GetDependency<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class DangerDefaultModifier : PropertyDependencyModifier<int>, IPropertyDependencyModifier<int> Methods | Improve this Doc View Source OnModify(int) Declaration public override int OnModify(int propertyValue) Parameters Type Name Description int propertyValue Returns Type Description int Overrides PropertyDependencyModifier<int>.OnModify(int) Implements IPropertyDependencyModifier<T>"
  },
  "api/Runtime.DataFramework.Properties.DictionaryProperty-2.html": {
    "href": "api/Runtime.DataFramework.Properties.DictionaryProperty-2.html",
    "title": "Class DictionaryProperty<TKey, T> | Example Unity documentation",
    "keywords": "Class DictionaryProperty<TKey, T> Inheritance object Property<Dictionary<TKey, T>> DictionaryProperty<TKey, T> LoadFromConfigDictProperty<TKey, T> Implements IDictionaryProperty<TKey, T> IProperty<Dictionary<TKey, T>> IPropertyBase Inherited Members Property<Dictionary<TKey, T>>.PropertyName Property<Dictionary<TKey, T>>.fullName Property<Dictionary<TKey, T>>.BaseValue Property<Dictionary<TKey, T>>.InitialValue Property<Dictionary<TKey, T>>.RealValue Property<Dictionary<TKey, T>>.overrideDependentProperties Property<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) Property<Dictionary<TKey, T>>.OnSetFullName(string) Property<Dictionary<TKey, T>>.GetFullName() Property<Dictionary<TKey, T>>.modifier Property<Dictionary<TKey, T>>.OnRecycled() Property<Dictionary<TKey, T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<TKey, T>>.GetDefautModifier() Property<Dictionary<TKey, T>>.GetPropertyName() Property<Dictionary<TKey, T>>.GetDefaultDependentProperties() Property<Dictionary<TKey, T>>.GetDependentProperties() Property<Dictionary<TKey, T>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<TKey, T>>.Initialize(IPropertyBase[], string) Property<Dictionary<TKey, T>>.OnClone(Dictionary<TKey, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class DictionaryProperty<TKey, T> : Property<Dictionary<TKey, T>>, IDictionaryProperty<TKey, T>, IProperty<Dictionary<TKey, T>>, IPropertyBase Type Parameters Name Description TKey T Constructors | Improve this Doc View Source DictionaryProperty() Declaration public DictionaryProperty() Properties | Improve this Doc View Source RealValue Use RealValues instead to invoke events Declaration public override BindableProperty<Dictionary<TKey, T>> RealValue { get; } Property Value Type Description BindableProperty<Dictionary<TKey, T>> Overrides Property<Dictionary<TKey, T>>.RealValue | Improve this Doc View Source RealValues Declaration public BindableDictionary<TKey, T> RealValues { get; } Property Value Type Description BindableDictionary<TKey, T> Methods | Improve this Doc View Source OnClone(Dictionary<TKey, T>) Deep clone of the list Declaration protected override Dictionary<TKey, T> OnClone(Dictionary<TKey, T> value) Parameters Type Name Description Dictionary<TKey, T> value Returns Type Description Dictionary<TKey, T> Overrides Property<Dictionary<TKey, T>>.OnClone(Dictionary<TKey, T>) Implements IDictionaryProperty<TKey, T> IProperty<T> IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.EmptyModifier-1.html": {
    "href": "api/Runtime.DataFramework.Properties.EmptyModifier-1.html",
    "title": "Class EmptyModifier<T> | Example Unity documentation",
    "keywords": "Class EmptyModifier<T> Inheritance object PropertyDependencyModifier<T> EmptyModifier<T> Implements IPropertyDependencyModifier<T> Inherited Members PropertyDependencyModifier<T>.dependenciesInType PropertyDependencyModifier<T>.Modify(T, IPropertyBase[], string, string) PropertyDependencyModifier<T>.GetModifierParameterFromConfig<T>(string, T) PropertyDependencyModifier<T>.GetDependency<T>(PropertyNameInfo) PropertyDependencyModifier<T>.GetDependency(PropertyNameInfo) PropertyDependencyModifier<T>.GetDependency<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class EmptyModifier<T> : PropertyDependencyModifier<T>, IPropertyDependencyModifier<T> Type Parameters Name Description T Methods | Improve this Doc View Source OnModify(T) Declaration public override T OnModify(T propertyValue) Parameters Type Name Description T propertyValue Returns Type Description T Overrides PropertyDependencyModifier<T>.OnModify(T) Implements IPropertyDependencyModifier<T>"
  },
  "api/Runtime.DataFramework.Properties.Health.html": {
    "href": "api/Runtime.DataFramework.Properties.Health.html",
    "title": "Class Health | Example Unity documentation",
    "keywords": "Class Health Inheritance object Property<HealthInfo> AbstractLoadFromConfigProperty<HealthInfo> Health Implements IHealthProperty IProperty<HealthInfo> ILoadFromConfigProperty IPropertyBase Inherited Members AbstractLoadFromConfigProperty<HealthInfo>.LoadFromConfig(dynamic) Property<HealthInfo>.PropertyName Property<HealthInfo>.fullName Property<HealthInfo>.BaseValue Property<HealthInfo>.InitialValue Property<HealthInfo>.RealValue Property<HealthInfo>.overrideDependentProperties Property<HealthInfo>.SetBaseValue(HealthInfo) Property<HealthInfo>.OnSetFullName(string) Property<HealthInfo>.GetFullName() Property<HealthInfo>.modifier Property<HealthInfo>.OnRecycled() Property<HealthInfo>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<HealthInfo>.GetDependentProperties() Property<HealthInfo>.SetDependentProperties(params PropertyNameInfo[]) Property<HealthInfo>.Initialize(IPropertyBase[], string) Property<HealthInfo>.OnClone(HealthInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class Health : AbstractLoadFromConfigProperty<HealthInfo>, IHealthProperty, IProperty<HealthInfo>, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<HealthInfo>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<HealthInfo> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<HealthInfo> Overrides Property<HealthInfo>.GetDefautModifier() | Improve this Doc View Source GetMaxHealth() Declaration public int GetMaxHealth() Returns Type Description int | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<HealthInfo>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override HealthInfo OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description HealthInfo Overrides AbstractLoadFromConfigProperty<HealthInfo>.OnSetBaseValueFromConfig(dynamic) Implements IHealthProperty IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.HealthDefaultModifier.html": {
    "href": "api/Runtime.DataFramework.Properties.HealthDefaultModifier.html",
    "title": "Class HealthDefaultModifier | Example Unity documentation",
    "keywords": "Class HealthDefaultModifier Inheritance object PropertyDependencyModifier<HealthInfo> HealthDefaultModifier Implements IPropertyDependencyModifier<HealthInfo> Inherited Members PropertyDependencyModifier<HealthInfo>.dependenciesInType PropertyDependencyModifier<HealthInfo>.Modify(HealthInfo, IPropertyBase[], string, string) PropertyDependencyModifier<HealthInfo>.GetModifierParameterFromConfig<T>(string, T) PropertyDependencyModifier<HealthInfo>.GetDependency<T>(PropertyNameInfo) PropertyDependencyModifier<HealthInfo>.GetDependency(PropertyNameInfo) PropertyDependencyModifier<HealthInfo>.GetDependency<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class HealthDefaultModifier : PropertyDependencyModifier<HealthInfo>, IPropertyDependencyModifier<HealthInfo> Methods | Improve this Doc View Source OnModify(HealthInfo) Declaration public override HealthInfo OnModify(HealthInfo propertyValue) Parameters Type Name Description HealthInfo propertyValue Returns Type Description HealthInfo Overrides PropertyDependencyModifier<HealthInfo>.OnModify(HealthInfo) Implements IPropertyDependencyModifier<T>"
  },
  "api/Runtime.DataFramework.Properties.HealthInfo.html": {
    "href": "api/Runtime.DataFramework.Properties.HealthInfo.html",
    "title": "Struct HealthInfo | Example Unity documentation",
    "keywords": "Struct HealthInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public struct HealthInfo Constructors | Improve this Doc View Source HealthInfo(int, int) Declaration public HealthInfo(int maxHealth, int currentHealth) Parameters Type Name Description int maxHealth int currentHealth Fields | Improve this Doc View Source CurrentHealth Declaration public int CurrentHealth Field Value Type Description int | Improve this Doc View Source MaxHealth Declaration public int MaxHealth Field Value Type Description int Operators | Improve this Doc View Source operator +(HealthInfo, int) Declaration public static HealthInfo operator +(HealthInfo healthInfo, int value) Parameters Type Name Description HealthInfo healthInfo int value Returns Type Description HealthInfo | Improve this Doc View Source operator -(HealthInfo, int) Declaration public static HealthInfo operator -(HealthInfo healthInfo, int value) Parameters Type Name Description HealthInfo healthInfo int value Returns Type Description HealthInfo"
  },
  "api/Runtime.DataFramework.Properties.IAttackRangeProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.IAttackRangeProperty.html",
    "title": "Interface IAttackRangeProperty | Example Unity documentation",
    "keywords": "Interface IAttackRangeProperty Inherited Members IProperty<float>.BaseValue IProperty<float>.InitialValue IProperty<float>.RealValue IProperty<float>.SetBaseValue(float) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IAttackRangeProperty : IProperty<float>, ILoadFromConfigProperty, IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IDangerProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.IDangerProperty.html",
    "title": "Interface IDangerProperty | Example Unity documentation",
    "keywords": "Interface IDangerProperty Inherited Members IProperty<int>.BaseValue IProperty<int>.InitialValue IProperty<int>.RealValue IProperty<int>.SetBaseValue(int) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IDangerProperty : IProperty<int>, ILoadFromConfigProperty, IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IDictionaryProperty-2.html": {
    "href": "api/Runtime.DataFramework.Properties.IDictionaryProperty-2.html",
    "title": "Interface IDictionaryProperty<TKey, T> | Example Unity documentation",
    "keywords": "Interface IDictionaryProperty<TKey, T> Inherited Members IProperty<Dictionary<TKey, T>>.BaseValue IProperty<Dictionary<TKey, T>>.InitialValue IProperty<Dictionary<TKey, T>>.RealValue IProperty<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IDictionaryProperty<TKey, T> : IProperty<Dictionary<TKey, T>>, IPropertyBase Type Parameters Name Description TKey T Properties | Improve this Doc View Source RealValues Declaration BindableDictionary<TKey, T> RealValues { get; } Property Value Type Description BindableDictionary<TKey, T>"
  },
  "api/Runtime.DataFramework.Properties.IHaveSubProperties.html": {
    "href": "api/Runtime.DataFramework.Properties.IHaveSubProperties.html",
    "title": "Interface IHaveSubProperties | Example Unity documentation",
    "keywords": "Interface IHaveSubProperties Inherited Members IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IHaveSubProperties : IPropertyBase Methods | Improve this Doc View Source GetChildProperties() Declaration IPropertyBase[] GetChildProperties() Returns Type Description IPropertyBase[] | Improve this Doc View Source OnLoadFromSavedData() Declaration void OnLoadFromSavedData() | Improve this Doc View Source OnSetChildFullName() Declaration void OnSetChildFullName() | Improve this Doc View Source RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) Declaration void RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty) Parameters Type Name Description Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty | Improve this Doc View Source UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) Declaration void UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty) Parameters Type Name Description Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty"
  },
  "api/Runtime.DataFramework.Properties.IHealthProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.IHealthProperty.html",
    "title": "Interface IHealthProperty | Example Unity documentation",
    "keywords": "Interface IHealthProperty Inherited Members IProperty<HealthInfo>.BaseValue IProperty<HealthInfo>.InitialValue IProperty<HealthInfo>.RealValue IProperty<HealthInfo>.SetBaseValue(HealthInfo) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IHealthProperty : IProperty<HealthInfo>, ILoadFromConfigProperty, IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IListProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IListProperty-1.html",
    "title": "Interface IListProperty<T> | Example Unity documentation",
    "keywords": "Interface IListProperty<T> Inherited Members IProperty<List<T>>.BaseValue IProperty<List<T>>.InitialValue IProperty<List<T>>.RealValue IProperty<List<T>>.SetBaseValue(List<T>) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IListProperty<T> : IProperty<List<T>>, IPropertyBase Type Parameters Name Description T Properties | Improve this Doc View Source RealValues Declaration BindableList<T> RealValues { get; } Property Value Type Description BindableList<T>"
  },
  "api/Runtime.DataFramework.Properties.ILoadFromConfigProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.ILoadFromConfigProperty.html",
    "title": "Interface ILoadFromConfigProperty | Example Unity documentation",
    "keywords": "Interface ILoadFromConfigProperty Inherited Members IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface ILoadFromConfigProperty : IPropertyBase Methods | Improve this Doc View Source LoadFromConfig(dynamic) Declaration void LoadFromConfig(dynamic value) Parameters Type Name Description dynamic value"
  },
  "api/Runtime.DataFramework.Properties.IProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IProperty-1.html",
    "title": "Interface IProperty<T> | Example Unity documentation",
    "keywords": "Interface IProperty<T> Inherited Members IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IProperty<T> : IPropertyBase Type Parameters Name Description T Properties | Improve this Doc View Source BaseValue Base Value is the initial configured base value of a specific property Declaration T BaseValue { get; set; } Property Value Type Description T | Improve this Doc View Source InitialValue Initial Value is the initial real value of this property when the bind entity is initialized. It is dependent on the base value and the modifiers. Not changed during the game Declaration T InitialValue { get; set; } Property Value Type Description T | Improve this Doc View Source RealValue Real Value initialized to InitialValue. Is changed during the game Declaration BindableProperty<T> RealValue { get; } Property Value Type Description BindableProperty<T> Methods | Improve this Doc View Source SetBaseValue(T) Declaration void SetBaseValue(T value) Parameters Type Name Description T value"
  },
  "api/Runtime.DataFramework.Properties.IPropertyBase.html": {
    "href": "api/Runtime.DataFramework.Properties.IPropertyBase.html",
    "title": "Interface IPropertyBase | Example Unity documentation",
    "keywords": "Interface IPropertyBase Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IPropertyBase Properties | Improve this Doc View Source PropertyName Declaration PropertyName PropertyName { get; } Property Value Type Description PropertyName Methods | Improve this Doc View Source GetBaseValue() Declaration dynamic GetBaseValue() Returns Type Description dynamic | Improve this Doc View Source GetDependentProperties() Declaration PropertyNameInfo[] GetDependentProperties() Returns Type Description PropertyNameInfo[] | Improve this Doc View Source GetFullName() Declaration string GetFullName() Returns Type Description string | Improve this Doc View Source GetInitialValue() Declaration dynamic GetInitialValue() Returns Type Description dynamic | Improve this Doc View Source GetRealValue() Declaration IBindableProperty GetRealValue() Returns Type Description IBindableProperty | Improve this Doc View Source Initialize(IPropertyBase[], string) Declaration void Initialize(IPropertyBase[] dependencies, string parentEntityName) Parameters Type Name Description IPropertyBase[] dependencies string parentEntityName | Improve this Doc View Source OnRecycled() Declaration void OnRecycled() | Improve this Doc View Source OnSetFullName(string) Declaration void OnSetFullName(string fullName) Parameters Type Name Description string fullName | Improve this Doc View Source SetBaseValue(object) Declaration void SetBaseValue(object value) Parameters Type Name Description object value | Improve this Doc View Source SetDependentProperties(params PropertyNameInfo[]) Declaration void SetDependentProperties(params PropertyNameInfo[] dependentProperties) Parameters Type Name Description PropertyNameInfo[] dependentProperties | Improve this Doc View Source SetModifier<T>(IPropertyDependencyModifier<T>) Declaration IPropertyBase SetModifier<T>(IPropertyDependencyModifier<T> modifier) Parameters Type Name Description IPropertyDependencyModifier<T> modifier Returns Type Description IPropertyBase Type Parameters Name Description T"
  },
  "api/Runtime.DataFramework.Properties.IPropertyDependencyModifier-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IPropertyDependencyModifier-1.html",
    "title": "Interface IPropertyDependencyModifier<T> | Example Unity documentation",
    "keywords": "Interface IPropertyDependencyModifier<T> Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IPropertyDependencyModifier<T> Type Parameters Name Description T Methods | Improve this Doc View Source Modify(T, IPropertyBase[], string, string) Declaration T Modify(T propertyValue, IPropertyBase[] dep, string parentEntityName, string propertyName) Parameters Type Name Description T propertyValue IPropertyBase[] dep string parentEntityName string propertyName Returns Type Description T"
  },
  "api/Runtime.DataFramework.Properties.IPropertyDictionary-2.html": {
    "href": "api/Runtime.DataFramework.Properties.IPropertyDictionary-2.html",
    "title": "Interface IPropertyDictionary<TKey, T> | Example Unity documentation",
    "keywords": "Interface IPropertyDictionary<TKey, T> Inherited Members IDictionaryProperty<TKey, T>.RealValues IProperty<Dictionary<TKey, T>>.BaseValue IProperty<Dictionary<TKey, T>>.InitialValue IProperty<Dictionary<TKey, T>>.RealValue IProperty<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) IHaveSubProperties.OnSetChildFullName() IHaveSubProperties.GetChildProperties() IHaveSubProperties.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) IHaveSubProperties.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) IHaveSubProperties.OnLoadFromSavedData() IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IPropertyDictionary<TKey, T> : IDictionaryProperty<TKey, T>, IProperty<Dictionary<TKey, T>>, IHaveSubProperties, IPropertyBase Type Parameters Name Description TKey T Methods | Improve this Doc View Source AddToRealValue(T) Declaration void AddToRealValue(T property) Parameters Type Name Description T property | Improve this Doc View Source GetKey(T) Declaration TKey GetKey(T value) Parameters Type Name Description T value Returns Type Description TKey | Improve this Doc View Source RemoveFromRealValue(TKey) Declaration void RemoveFromRealValue(TKey key) Parameters Type Name Description TKey key"
  },
  "api/Runtime.DataFramework.Properties.IRarityProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.IRarityProperty.html",
    "title": "Interface IRarityProperty | Example Unity documentation",
    "keywords": "Interface IRarityProperty Inherited Members IProperty<int>.BaseValue IProperty<int>.InitialValue IProperty<int>.RealValue IProperty<int>.SetBaseValue(int) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IRarityProperty : IProperty<int>, ILoadFromConfigProperty, IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.ITasteProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.ITasteProperty.html",
    "title": "Interface ITasteProperty | Example Unity documentation",
    "keywords": "Interface ITasteProperty Inherited Members IListProperty<TasteType>.RealValues IProperty<List<TasteType>>.BaseValue IProperty<List<TasteType>>.InitialValue IProperty<List<TasteType>>.RealValue IProperty<List<TasteType>>.SetBaseValue(List<TasteType>) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface ITasteProperty : IListProperty<TasteType>, IProperty<List<TasteType>>, ILoadFromConfigProperty, IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IVigilianceProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.IVigilianceProperty.html",
    "title": "Interface IVigilianceProperty | Example Unity documentation",
    "keywords": "Interface IVigilianceProperty Inherited Members IProperty<float>.BaseValue IProperty<float>.InitialValue IProperty<float>.RealValue IProperty<float>.SetBaseValue(float) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public interface IVigilianceProperty : IProperty<float>, ILoadFromConfigProperty, IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IndependentListProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IndependentListProperty-1.html",
    "title": "Class IndependentListProperty<T> | Example Unity documentation",
    "keywords": "Class IndependentListProperty<T> Independent Properties are properties without any dependencies Inheritance object Property<List<T>> ListProperty<T> IndependentListProperty<T> IndependentLoadFromConfigListProperty<T> Implements IListProperty<T> IProperty<List<T>> IPropertyBase Inherited Members ListProperty<T>.RealValue ListProperty<T>.RealValues ListProperty<T>.SetBaseValue(List<T>) ListProperty<T>.OnClone(List<T>) Property<List<T>>.PropertyName Property<List<T>>.fullName Property<List<T>>.BaseValue Property<List<T>>.InitialValue Property<List<T>>.overrideDependentProperties Property<List<T>>.OnSetFullName(string) Property<List<T>>.GetFullName() Property<List<T>>.modifier Property<List<T>>.OnRecycled() Property<List<T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<List<T>>.GetPropertyName() Property<List<T>>.GetDependentProperties() Property<List<T>>.SetDependentProperties(params PropertyNameInfo[]) Property<List<T>>.Initialize(IPropertyBase[], string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class IndependentListProperty<T> : ListProperty<T>, IListProperty<T>, IProperty<List<T>>, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source IndependentListProperty() Declaration protected IndependentListProperty() Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<List<T>>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<List<T>> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<List<T>> Overrides Property<List<T>>.GetDefautModifier() Implements IListProperty<T> IProperty<T> IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IndependentLoadFromConfigListProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IndependentLoadFromConfigListProperty-1.html",
    "title": "Class IndependentLoadFromConfigListProperty<T> | Example Unity documentation",
    "keywords": "Class IndependentLoadFromConfigListProperty<T> Inheritance object Property<List<T>> ListProperty<T> IndependentListProperty<T> IndependentLoadFromConfigListProperty<T> Taste Implements IListProperty<T> IProperty<List<T>> ILoadFromConfigProperty IPropertyBase Inherited Members IndependentListProperty<T>.GetDefautModifier() IndependentListProperty<T>.GetDefaultDependentProperties() ListProperty<T>.RealValue ListProperty<T>.RealValues ListProperty<T>.SetBaseValue(List<T>) ListProperty<T>.OnClone(List<T>) Property<List<T>>.PropertyName Property<List<T>>.fullName Property<List<T>>.BaseValue Property<List<T>>.InitialValue Property<List<T>>.overrideDependentProperties Property<List<T>>.OnSetFullName(string) Property<List<T>>.GetFullName() Property<List<T>>.modifier Property<List<T>>.OnRecycled() Property<List<T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<List<T>>.GetPropertyName() Property<List<T>>.GetDependentProperties() Property<List<T>>.SetDependentProperties(params PropertyNameInfo[]) Property<List<T>>.Initialize(IPropertyBase[], string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class IndependentLoadFromConfigListProperty<T> : IndependentListProperty<T>, IListProperty<T>, IProperty<List<T>>, ILoadFromConfigProperty, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source IndependentLoadFromConfigListProperty() Declaration protected IndependentLoadFromConfigListProperty() Methods | Improve this Doc View Source LoadFromConfig(dynamic) Declaration public void LoadFromConfig(dynamic value) Parameters Type Name Description dynamic value | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public abstract List<T> OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description List<T> Implements IListProperty<T> IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IndependentLoadFromConfigProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IndependentLoadFromConfigProperty-1.html",
    "title": "Class IndependentLoadFromConfigProperty<T> | Example Unity documentation",
    "keywords": "Class IndependentLoadFromConfigProperty<T> Inheritance object Property<T> IndependentProperty<T> IndependentLoadFromConfigProperty<T> Rarity Implements IProperty<T> ILoadFromConfigProperty IPropertyBase Inherited Members IndependentProperty<T>.GetDefautModifier() IndependentProperty<T>.GetDefaultDependentProperties() Property<T>.PropertyName Property<T>.fullName Property<T>.BaseValue Property<T>.InitialValue Property<T>.RealValue Property<T>.overrideDependentProperties Property<T>.SetBaseValue(T) Property<T>.OnSetFullName(string) Property<T>.GetFullName() Property<T>.modifier Property<T>.OnRecycled() Property<T>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<T>.GetPropertyName() Property<T>.GetDependentProperties() Property<T>.SetDependentProperties(params PropertyNameInfo[]) Property<T>.Initialize(IPropertyBase[], string) Property<T>.OnClone(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class IndependentLoadFromConfigProperty<T> : IndependentProperty<T>, IProperty<T>, ILoadFromConfigProperty, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source IndependentLoadFromConfigProperty() Declaration protected IndependentLoadFromConfigProperty() Methods | Improve this Doc View Source LoadFromConfig(dynamic) Declaration public void LoadFromConfig(dynamic value) Parameters Type Name Description dynamic value | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public abstract T OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description T Implements IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.IndependentProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.IndependentProperty-1.html",
    "title": "Class IndependentProperty<T> | Example Unity documentation",
    "keywords": "Class IndependentProperty<T> Independent Properties are properties without any dependencies Inheritance object Property<T> IndependentProperty<T> IndependentLoadFromConfigProperty<T> Implements IProperty<T> IPropertyBase Inherited Members Property<T>.PropertyName Property<T>.fullName Property<T>.BaseValue Property<T>.InitialValue Property<T>.RealValue Property<T>.overrideDependentProperties Property<T>.SetBaseValue(T) Property<T>.OnSetFullName(string) Property<T>.GetFullName() Property<T>.modifier Property<T>.OnRecycled() Property<T>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<T>.GetPropertyName() Property<T>.GetDependentProperties() Property<T>.SetDependentProperties(params PropertyNameInfo[]) Property<T>.Initialize(IPropertyBase[], string) Property<T>.OnClone(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class IndependentProperty<T> : Property<T>, IProperty<T>, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source IndependentProperty() Declaration protected IndependentProperty() Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<T>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<T> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<T> Overrides Property<T>.GetDefautModifier() Implements IProperty<T> IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.ListProperty-1.html": {
    "href": "api/Runtime.DataFramework.Properties.ListProperty-1.html",
    "title": "Class ListProperty<T> | Example Unity documentation",
    "keywords": "Class ListProperty<T> Use PropertyList instead if you want the values to be property as well. If your values are not property, use this class Inheritance object Property<List<T>> ListProperty<T> IndependentListProperty<T> Implements IListProperty<T> IProperty<List<T>> IPropertyBase Inherited Members Property<List<T>>.PropertyName Property<List<T>>.fullName Property<List<T>>.BaseValue Property<List<T>>.InitialValue Property<List<T>>.overrideDependentProperties Property<List<T>>.OnSetFullName(string) Property<List<T>>.GetFullName() Property<List<T>>.modifier Property<List<T>>.OnRecycled() Property<List<T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<List<T>>.GetDefautModifier() Property<List<T>>.GetPropertyName() Property<List<T>>.GetDefaultDependentProperties() Property<List<T>>.GetDependentProperties() Property<List<T>>.SetDependentProperties(params PropertyNameInfo[]) Property<List<T>>.Initialize(IPropertyBase[], string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class ListProperty<T> : Property<List<T>>, IListProperty<T>, IProperty<List<T>>, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source ListProperty() Declaration public ListProperty() | Improve this Doc View Source ListProperty(params T[]) Declaration public ListProperty(params T[] baseValues) Parameters Type Name Description T[] baseValues Properties | Improve this Doc View Source RealValue Use RealValues instead to invoke events Declaration public override BindableProperty<List<T>> RealValue { get; } Property Value Type Description BindableProperty<List<T>> Overrides Property<List<T>>.RealValue | Improve this Doc View Source RealValues Declaration public BindableList<T> RealValues { get; } Property Value Type Description BindableList<T> Methods | Improve this Doc View Source OnClone(List<T>) Deep clone of the list Declaration protected override List<T> OnClone(List<T> value) Parameters Type Name Description List<T> value Returns Type Description List<T> Overrides Property<List<T>>.OnClone(List<T>) | Improve this Doc View Source SetBaseValue(List<T>) Declaration public override void SetBaseValue(List<T> value) Parameters Type Name Description List<T> value Overrides Property<List<T>>.SetBaseValue(List<T>) Implements IListProperty<T> IProperty<T> IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.LoadFromConfigDictProperty-2.html": {
    "href": "api/Runtime.DataFramework.Properties.LoadFromConfigDictProperty-2.html",
    "title": "Class LoadFromConfigDictProperty<TKey, T> | Example Unity documentation",
    "keywords": "Class LoadFromConfigDictProperty<TKey, T> Inheritance object Property<Dictionary<TKey, T>> DictionaryProperty<TKey, T> LoadFromConfigDictProperty<TKey, T> TagProperty Implements IDictionaryProperty<TKey, T> IProperty<Dictionary<TKey, T>> ILoadFromConfigProperty IPropertyBase Inherited Members DictionaryProperty<TKey, T>.RealValue DictionaryProperty<TKey, T>.RealValues DictionaryProperty<TKey, T>.OnClone(Dictionary<TKey, T>) Property<Dictionary<TKey, T>>.PropertyName Property<Dictionary<TKey, T>>.fullName Property<Dictionary<TKey, T>>.BaseValue Property<Dictionary<TKey, T>>.InitialValue Property<Dictionary<TKey, T>>.RealValue Property<Dictionary<TKey, T>>.overrideDependentProperties Property<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) Property<Dictionary<TKey, T>>.OnSetFullName(string) Property<Dictionary<TKey, T>>.GetFullName() Property<Dictionary<TKey, T>>.modifier Property<Dictionary<TKey, T>>.OnRecycled() Property<Dictionary<TKey, T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<TKey, T>>.GetDefautModifier() Property<Dictionary<TKey, T>>.GetPropertyName() Property<Dictionary<TKey, T>>.GetDefaultDependentProperties() Property<Dictionary<TKey, T>>.GetDependentProperties() Property<Dictionary<TKey, T>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<TKey, T>>.Initialize(IPropertyBase[], string) Property<Dictionary<TKey, T>>.OnClone(Dictionary<TKey, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class LoadFromConfigDictProperty<TKey, T> : DictionaryProperty<TKey, T>, IDictionaryProperty<TKey, T>, IProperty<Dictionary<TKey, T>>, ILoadFromConfigProperty, IPropertyBase Type Parameters Name Description TKey T Methods | Improve this Doc View Source LoadFromConfig(dynamic) Declaration public void LoadFromConfig(dynamic value) Parameters Type Name Description dynamic value | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public abstract Dictionary<TKey, T> OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<TKey, T> Implements IDictionaryProperty<TKey, T> IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.Property-1.html": {
    "href": "api/Runtime.DataFramework.Properties.Property-1.html",
    "title": "Class Property<T> | Example Unity documentation",
    "keywords": "Class Property<T> Inheritance object Property<T> AbstractLoadFromConfigProperty<T> CustomDataProperty<T> DictionaryProperty<TKey, T> IndependentProperty<T> ListProperty<T> PropertyDictionary<TKey, T> PropertyList<T> Implements IProperty<T> IPropertyBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class Property<T> : IProperty<T>, IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source Property() Base constructor for ES3 serialization Declaration public Property() Fields | Improve this Doc View Source fullName Declaration protected string fullName Field Value Type Description string | Improve this Doc View Source modifier Declaration protected IPropertyDependencyModifier<T> modifier Field Value Type Description IPropertyDependencyModifier<T> | Improve this Doc View Source overrideDependentProperties Declaration protected PropertyNameInfo[] overrideDependentProperties Field Value Type Description PropertyNameInfo[] Properties | Improve this Doc View Source BaseValue Base Value is the initial configured base value of a specific property Declaration public virtual T BaseValue { get; set; } Property Value Type Description T | Improve this Doc View Source InitialValue Initial Value is the initial real value of this property when the bind entity is initialized. It is dependent on the base value and the modifiers. Not changed during the game Declaration public virtual T InitialValue { get; set; } Property Value Type Description T | Improve this Doc View Source PropertyName Declaration public PropertyName PropertyName { get; } Property Value Type Description PropertyName | Improve this Doc View Source RealValue Real Value initialized to InitialValue. Is changed during the game Declaration public virtual BindableProperty<T> RealValue { get; } Property Value Type Description BindableProperty<T> Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public abstract PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected abstract IPropertyDependencyModifier<T> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<T> | Improve this Doc View Source GetDependentProperties() Declaration public virtual PropertyNameInfo[] GetDependentProperties() Returns Type Description PropertyNameInfo[] | Improve this Doc View Source GetFullName() Declaration public string GetFullName() Returns Type Description string | Improve this Doc View Source GetPropertyName() Declaration protected abstract PropertyName GetPropertyName() Returns Type Description PropertyName | Improve this Doc View Source Initialize(IPropertyBase[], string) Declaration public virtual void Initialize(IPropertyBase[] dependencies, string parentEntityName) Parameters Type Name Description IPropertyBase[] dependencies string parentEntityName | Improve this Doc View Source OnClone(T) Declaration protected virtual T OnClone(T value) Parameters Type Name Description T value Returns Type Description T | Improve this Doc View Source OnRecycled() Declaration public virtual void OnRecycled() | Improve this Doc View Source OnSetFullName(string) Declaration public void OnSetFullName(string fullName) Parameters Type Name Description string fullName | Improve this Doc View Source SetBaseValue(T) Declaration public virtual void SetBaseValue(T value) Parameters Type Name Description T value | Improve this Doc View Source SetDependentProperties(params PropertyNameInfo[]) Declaration public void SetDependentProperties(params PropertyNameInfo[] dependentProperties) Parameters Type Name Description PropertyNameInfo[] dependentProperties | Improve this Doc View Source SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Declaration public IPropertyBase SetModifier<ValueType>(IPropertyDependencyModifier<ValueType> modifier) Parameters Type Name Description IPropertyDependencyModifier<ValueType> modifier Returns Type Description IPropertyBase Type Parameters Name Description ValueType Operators | Improve this Doc View Source implicit operator T(Property<T>) Declaration public static implicit operator T(Property<T> property) Parameters Type Name Description Property<T> property Returns Type Description T Implements IProperty<T> IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.PropertyDependencyModifier-1.html": {
    "href": "api/Runtime.DataFramework.Properties.PropertyDependencyModifier-1.html",
    "title": "Class PropertyDependencyModifier<T> | Example Unity documentation",
    "keywords": "Class PropertyDependencyModifier<T> No need to be ES3 serialized Inheritance object PropertyDependencyModifier<T> AttackRangeDefaultModifier DangerDefaultModifier EmptyModifier<T> HealthDefaultModifier VigilianceDefaultModifier Implements IPropertyDependencyModifier<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class PropertyDependencyModifier<T> : IPropertyDependencyModifier<T> Type Parameters Name Description T Fields | Improve this Doc View Source dependenciesInType Declaration protected Dictionary<Type, IPropertyBase> dependenciesInType Field Value Type Description Dictionary<Type, IPropertyBase> Methods | Improve this Doc View Source GetDependency(PropertyNameInfo) Declaration protected IPropertyBase GetDependency(PropertyNameInfo nameInfo) Parameters Type Name Description PropertyNameInfo nameInfo Returns Type Description IPropertyBase | Improve this Doc View Source GetDependency<T>() Only use this when you are sure that there is only one dependency of this type Declaration public T GetDependency<T>() where T : IPropertyBase Returns Type Description T Type Parameters Name Description T Exceptions Type Condition Exception | Improve this Doc View Source GetDependency<T>(PropertyNameInfo) Declaration protected T GetDependency<T>(PropertyNameInfo nameInfo) where T : IPropertyBase Parameters Type Name Description PropertyNameInfo nameInfo Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetModifierParameterFromConfig<T>(string, T) Get parameters for this property modifier specific to this property + its entity + its dependent property from config file Declaration protected T GetModifierParameterFromConfig<T>(string paramName, T defaultValue) Parameters Type Name Description string paramName T defaultValue Returns Type Description T Type Parameters Name Description T The type of the parameter to parse to | Improve this Doc View Source Modify(T, IPropertyBase[], string, string) Declaration public T Modify(T propertyValue, IPropertyBase[] dep, string parentEntityName, string propertyName) Parameters Type Name Description T propertyValue IPropertyBase[] dep string parentEntityName string propertyName Returns Type Description T | Improve this Doc View Source OnModify(T) Declaration public abstract T OnModify(T propertyValue) Parameters Type Name Description T propertyValue Returns Type Description T Implements IPropertyDependencyModifier<T>"
  },
  "api/Runtime.DataFramework.Properties.PropertyDictionary-2.html": {
    "href": "api/Runtime.DataFramework.Properties.PropertyDictionary-2.html",
    "title": "Class PropertyDictionary<TKey, T> | Example Unity documentation",
    "keywords": "Class PropertyDictionary<TKey, T> Inheritance object Property<Dictionary<TKey, T>> PropertyDictionary<TKey, T> CustomProperty PropertyDictionaryLoadFromConfig<TKey, T> Implements IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<Dictionary<TKey, T>> IHaveSubProperties IPropertyBase Inherited Members Property<Dictionary<TKey, T>>.PropertyName Property<Dictionary<TKey, T>>.fullName Property<Dictionary<TKey, T>>.BaseValue Property<Dictionary<TKey, T>>.InitialValue Property<Dictionary<TKey, T>>.RealValue Property<Dictionary<TKey, T>>.overrideDependentProperties Property<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) Property<Dictionary<TKey, T>>.OnSetFullName(string) Property<Dictionary<TKey, T>>.GetFullName() Property<Dictionary<TKey, T>>.modifier Property<Dictionary<TKey, T>>.OnRecycled() Property<Dictionary<TKey, T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<TKey, T>>.GetDefautModifier() Property<Dictionary<TKey, T>>.GetPropertyName() Property<Dictionary<TKey, T>>.GetDefaultDependentProperties() Property<Dictionary<TKey, T>>.GetDependentProperties() Property<Dictionary<TKey, T>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<TKey, T>>.Initialize(IPropertyBase[], string) Property<Dictionary<TKey, T>>.OnClone(Dictionary<TKey, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class PropertyDictionary<TKey, T> : Property<Dictionary<TKey, T>>, IPropertyDictionary<TKey, T>, IDictionaryProperty<TKey, T>, IProperty<Dictionary<TKey, T>>, IHaveSubProperties, IPropertyBase where T : IPropertyBase Type Parameters Name Description TKey T Constructors | Improve this Doc View Source PropertyDictionary() Declaration public PropertyDictionary() | Improve this Doc View Source PropertyDictionary(params T[]) Declaration public PropertyDictionary(params T[] baseValues) Parameters Type Name Description T[] baseValues Fields | Improve this Doc View Source requestRegisterProperty Declaration protected Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty Field Value Type Description Action<Type, IPropertyBase, string, bool, bool> Properties | Improve this Doc View Source BaseValue Base Value is the initial configured base value of a specific property Declaration public override Dictionary<TKey, T> BaseValue { get; set; } Property Value Type Description Dictionary<TKey, T> Overrides Property<Dictionary<TKey, T>>.BaseValue | Improve this Doc View Source InitialValue Initial Value is the initial real value of this property when the bind entity is initialized. It is dependent on the base value and the modifiers. Not changed during the game Declaration public override Dictionary<TKey, T> InitialValue { get; set; } Property Value Type Description Dictionary<TKey, T> Overrides Property<Dictionary<TKey, T>>.InitialValue | Improve this Doc View Source RealValue Use RealValues instead to invoke events Declaration public override BindableProperty<Dictionary<TKey, T>> RealValue { get; } Property Value Type Description BindableProperty<Dictionary<TKey, T>> Overrides Property<Dictionary<TKey, T>>.RealValue | Improve this Doc View Source RealValues Declaration public BindableDictionary<TKey, T> RealValues { get; } Property Value Type Description BindableDictionary<TKey, T> Methods | Improve this Doc View Source AddToRealValue(T) Declaration public void AddToRealValue(T property) Parameters Type Name Description T property | Improve this Doc View Source GetChildProperties() Declaration public IPropertyBase[] GetChildProperties() Returns Type Description IPropertyBase[] | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<Dictionary<TKey, T>>.GetDefaultDependentProperties() | Improve this Doc View Source GetKey(T) Declaration public abstract TKey GetKey(T value) Parameters Type Name Description T value Returns Type Description TKey | Improve this Doc View Source Initialize(IPropertyBase[], string) Declaration public override void Initialize(IPropertyBase[] dependencies, string parentEntityName) Parameters Type Name Description IPropertyBase[] dependencies string parentEntityName Overrides Property<Dictionary<TKey, T>>.Initialize(IPropertyBase[], string) | Improve this Doc View Source OnClone(Dictionary<TKey, T>) Shallow clone of the list Declaration protected override Dictionary<TKey, T> OnClone(Dictionary<TKey, T> value) Parameters Type Name Description Dictionary<TKey, T> value Returns Type Description Dictionary<TKey, T> Overrides Property<Dictionary<TKey, T>>.OnClone(Dictionary<TKey, T>) | Improve this Doc View Source OnLoadFromSavedData() Declaration public void OnLoadFromSavedData() | Improve this Doc View Source OnRecycled() Declaration public override void OnRecycled() Overrides Property<Dictionary<TKey, T>>.OnRecycled() | Improve this Doc View Source OnSetChildFullName() Declaration public void OnSetChildFullName() | Improve this Doc View Source RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) Declaration public void RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty) Parameters Type Name Description Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty | Improve this Doc View Source RemoveFromRealValue(TKey) Declaration public void RemoveFromRealValue(TKey key) Parameters Type Name Description TKey key | Improve this Doc View Source SetBaseValue(Dictionary<TKey, T>) Declaration public override void SetBaseValue(Dictionary<TKey, T> value) Parameters Type Name Description Dictionary<TKey, T> value Overrides Property<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) | Improve this Doc View Source UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) Declaration public void UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty) Parameters Type Name Description Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty Implements IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<T> IHaveSubProperties IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.PropertyDictionaryLoadFromConfig-2.html": {
    "href": "api/Runtime.DataFramework.Properties.PropertyDictionaryLoadFromConfig-2.html",
    "title": "Class PropertyDictionaryLoadFromConfig<TKey, T> | Example Unity documentation",
    "keywords": "Class PropertyDictionaryLoadFromConfig<TKey, T> Inheritance object Property<Dictionary<TKey, T>> PropertyDictionary<TKey, T> PropertyDictionaryLoadFromConfig<TKey, T> CustomProperties Implements IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<Dictionary<TKey, T>> IHaveSubProperties ILoadFromConfigProperty IPropertyBase Inherited Members PropertyDictionary<TKey, T>.BaseValue PropertyDictionary<TKey, T>.RealValue PropertyDictionary<TKey, T>.RealValues PropertyDictionary<TKey, T>.InitialValue PropertyDictionary<TKey, T>.GetKey(T) PropertyDictionary<TKey, T>.OnLoadFromSavedData() PropertyDictionary<TKey, T>.SetBaseValue(Dictionary<TKey, T>) PropertyDictionary<TKey, T>.OnSetChildFullName() PropertyDictionary<TKey, T>.AddToRealValue(T) PropertyDictionary<TKey, T>.RemoveFromRealValue(TKey) PropertyDictionary<TKey, T>.OnClone(Dictionary<TKey, T>) PropertyDictionary<TKey, T>.Initialize(IPropertyBase[], string) PropertyDictionary<TKey, T>.GetChildProperties() PropertyDictionary<TKey, T>.requestRegisterProperty PropertyDictionary<TKey, T>.RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<TKey, T>.UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) PropertyDictionary<TKey, T>.GetDefaultDependentProperties() PropertyDictionary<TKey, T>.OnRecycled() Property<Dictionary<TKey, T>>.PropertyName Property<Dictionary<TKey, T>>.fullName Property<Dictionary<TKey, T>>.BaseValue Property<Dictionary<TKey, T>>.InitialValue Property<Dictionary<TKey, T>>.RealValue Property<Dictionary<TKey, T>>.overrideDependentProperties Property<Dictionary<TKey, T>>.SetBaseValue(Dictionary<TKey, T>) Property<Dictionary<TKey, T>>.OnSetFullName(string) Property<Dictionary<TKey, T>>.GetFullName() Property<Dictionary<TKey, T>>.modifier Property<Dictionary<TKey, T>>.OnRecycled() Property<Dictionary<TKey, T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<TKey, T>>.GetDefautModifier() Property<Dictionary<TKey, T>>.GetPropertyName() Property<Dictionary<TKey, T>>.GetDefaultDependentProperties() Property<Dictionary<TKey, T>>.GetDependentProperties() Property<Dictionary<TKey, T>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<TKey, T>>.Initialize(IPropertyBase[], string) Property<Dictionary<TKey, T>>.OnClone(Dictionary<TKey, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class PropertyDictionaryLoadFromConfig<TKey, T> : PropertyDictionary<TKey, T>, IPropertyDictionary<TKey, T>, IDictionaryProperty<TKey, T>, IProperty<Dictionary<TKey, T>>, IHaveSubProperties, ILoadFromConfigProperty, IPropertyBase where T : IPropertyBase Type Parameters Name Description TKey T Constructors | Improve this Doc View Source PropertyDictionaryLoadFromConfig() Declaration public PropertyDictionaryLoadFromConfig() Methods | Improve this Doc View Source LoadFromConfig(dynamic) Declaration public void LoadFromConfig(dynamic value) Parameters Type Name Description dynamic value | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public abstract Dictionary<TKey, T> OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<TKey, T> Implements IPropertyDictionary<TKey, T> IDictionaryProperty<TKey, T> IProperty<T> IHaveSubProperties ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.PropertyList-1.html": {
    "href": "api/Runtime.DataFramework.Properties.PropertyList-1.html",
    "title": "Class PropertyList<T> | Example Unity documentation",
    "keywords": "Class PropertyList<T> Use ListProperty instead if your values are not properties. If your values are properties, use this class Inheritance object Property<List<T>> PropertyList<T> Implements IListProperty<T> IProperty<List<T>> IHaveSubProperties IPropertyBase Inherited Members Property<List<T>>.PropertyName Property<List<T>>.fullName Property<List<T>>.overrideDependentProperties Property<List<T>>.OnSetFullName(string) Property<List<T>>.GetFullName() Property<List<T>>.modifier Property<List<T>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<List<T>>.GetDefautModifier() Property<List<T>>.GetPropertyName() Property<List<T>>.GetDependentProperties() Property<List<T>>.SetDependentProperties(params PropertyNameInfo[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public abstract class PropertyList<T> : Property<List<T>>, IListProperty<T>, IProperty<List<T>>, IHaveSubProperties, IPropertyBase where T : IPropertyBase Type Parameters Name Description T Constructors | Improve this Doc View Source PropertyList() Declaration public PropertyList() | Improve this Doc View Source PropertyList(params T[]) Declaration public PropertyList(params T[] baseValues) Parameters Type Name Description T[] baseValues Fields | Improve this Doc View Source requestRegisterProperty Declaration protected Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty Field Value Type Description Action<Type, IPropertyBase, string, bool, bool> Properties | Improve this Doc View Source BaseValue Base Value is the initial configured base value of a specific property Declaration public override List<T> BaseValue { get; set; } Property Value Type Description List<T> Overrides Property<List<T>>.BaseValue | Improve this Doc View Source InitialValue Initial Value is the initial real value of this property when the bind entity is initialized. It is dependent on the base value and the modifiers. Not changed during the game Declaration public override List<T> InitialValue { get; set; } Property Value Type Description List<T> Overrides Property<List<T>>.InitialValue | Improve this Doc View Source RealValue Use RealValues instead to invoke events Declaration public override BindableProperty<List<T>> RealValue { get; } Property Value Type Description BindableProperty<List<T>> Overrides Property<List<T>>.RealValue | Improve this Doc View Source RealValues Declaration public BindableList<T> RealValues { get; } Property Value Type Description BindableList<T> Methods | Improve this Doc View Source AddToRealValue(T) Declaration public void AddToRealValue(T property) Parameters Type Name Description T property | Improve this Doc View Source GetChildProperties() Declaration public IPropertyBase[] GetChildProperties() Returns Type Description IPropertyBase[] | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<List<T>>.GetDefaultDependentProperties() | Improve this Doc View Source Initialize(IPropertyBase[], string) Declaration public override void Initialize(IPropertyBase[] dependencies, string parentEntityName) Parameters Type Name Description IPropertyBase[] dependencies string parentEntityName Overrides Property<List<T>>.Initialize(IPropertyBase[], string) | Improve this Doc View Source OnClone(List<T>) Shallow clone of the list Declaration protected override List<T> OnClone(List<T> value) Parameters Type Name Description List<T> value Returns Type Description List<T> Overrides Property<List<T>>.OnClone(List<T>) | Improve this Doc View Source OnLoadFromSavedData() Declaration public void OnLoadFromSavedData() | Improve this Doc View Source OnRecycled() Declaration public override void OnRecycled() Overrides Property<List<T>>.OnRecycled() | Improve this Doc View Source OnSetChildFullName() Declaration public void OnSetChildFullName() | Improve this Doc View Source RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) Declaration public void RegisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty) Parameters Type Name Description Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty | Improve this Doc View Source SetBaseValue(List<T>) Declaration public override void SetBaseValue(List<T> value) Parameters Type Name Description List<T> value Overrides Property<List<T>>.SetBaseValue(List<T>) | Improve this Doc View Source UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool>) Declaration public void UnregisterRequestRegisterProperty(Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty) Parameters Type Name Description Action<Type, IPropertyBase, string, bool, bool> requestRegisterProperty Implements IListProperty<T> IProperty<T> IHaveSubProperties IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.PropertyName.html": {
    "href": "api/Runtime.DataFramework.Properties.PropertyName.html",
    "title": "Enum PropertyName | Example Unity documentation",
    "keywords": "Enum PropertyName Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public enum PropertyName Fields Name Description attack_range custom_properties custom_property custom_property_data danger health rarity resource resource_list tags taste test test_gold_resource test_interest test_interest_dict test_interest_list test_resource_dict test_silver_resource vigiliance"
  },
  "api/Runtime.DataFramework.Properties.PropertyNameInfo.html": {
    "href": "api/Runtime.DataFramework.Properties.PropertyNameInfo.html",
    "title": "Struct PropertyNameInfo | Example Unity documentation",
    "keywords": "Struct PropertyNameInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public struct PropertyNameInfo Constructors | Improve this Doc View Source PropertyNameInfo(IPropertyBase) Use this constructor to get the fullname of a property if you have the property Declaration public PropertyNameInfo(IPropertyBase property) Parameters Type Name Description IPropertyBase property | Improve this Doc View Source PropertyNameInfo(PropertyName) Use this constructor when the dependency is a property of the entity, not a sub property of some other properties Declaration public PropertyNameInfo(PropertyName propertyName) Parameters Type Name Description PropertyName propertyName | Improve this Doc View Source PropertyNameInfo(PropertyName, string) Use this constructor to get the fullname of a property if you have the property name and the parent name Do not include property name in the parent name Declaration public PropertyNameInfo(PropertyName propertyName, string parentName) Parameters Type Name Description PropertyName propertyName string parentName | Improve this Doc View Source PropertyNameInfo(string) Use this constructor when the dependency is a sub property of some other properties (i.e. custom properties) Declaration public PropertyNameInfo(string fullName) Parameters Type Name Description string fullName Methods | Improve this Doc View Source GetFullName() Declaration public string GetFullName() Returns Type Description string"
  },
  "api/Runtime.DataFramework.Properties.Rarity.html": {
    "href": "api/Runtime.DataFramework.Properties.Rarity.html",
    "title": "Class Rarity | Example Unity documentation",
    "keywords": "Class Rarity Inheritance object Property<int> IndependentProperty<int> IndependentLoadFromConfigProperty<int> Rarity Implements IRarityProperty IProperty<int> ILoadFromConfigProperty IPropertyBase Inherited Members IndependentLoadFromConfigProperty<int>.LoadFromConfig(dynamic) IndependentProperty<int>.GetDefautModifier() IndependentProperty<int>.GetDefaultDependentProperties() Property<int>.PropertyName Property<int>.fullName Property<int>.BaseValue Property<int>.InitialValue Property<int>.RealValue Property<int>.overrideDependentProperties Property<int>.SetBaseValue(int) Property<int>.OnSetFullName(string) Property<int>.GetFullName() Property<int>.modifier Property<int>.OnRecycled() Property<int>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<int>.GetDependentProperties() Property<int>.SetDependentProperties(params PropertyNameInfo[]) Property<int>.Initialize(IPropertyBase[], string) Property<int>.OnClone(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class Rarity : IndependentLoadFromConfigProperty<int>, IRarityProperty, IProperty<int>, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<int>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override int OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description int Overrides IndependentLoadFromConfigProperty<int>.OnSetBaseValueFromConfig(dynamic) Implements IRarityProperty IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.SerializedChildPropertyInfo.html": {
    "href": "api/Runtime.DataFramework.Properties.SerializedChildPropertyInfo.html",
    "title": "Class SerializedChildPropertyInfo | Example Unity documentation",
    "keywords": "Class SerializedChildPropertyInfo Inheritance object SerializedChildPropertyInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class SerializedChildPropertyInfo Constructors | Improve this Doc View Source SerializedChildPropertyInfo(bool, bool) Declaration public SerializedChildPropertyInfo(bool isInBase, bool isInReal) Parameters Type Name Description bool isInBase bool isInReal Fields | Improve this Doc View Source IsInBase Declaration public bool IsInBase Field Value Type Description bool | Improve this Doc View Source IsInReal Declaration public bool IsInReal Field Value Type Description bool"
  },
  "api/Runtime.DataFramework.Properties.TagProperty.ITagProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.TagProperty.ITagProperty.html",
    "title": "Interface ITagProperty | Example Unity documentation",
    "keywords": "Interface ITagProperty Property for tags Inherited Members IProperty<Dictionary<TagName, int>>.BaseValue IProperty<Dictionary<TagName, int>>.InitialValue IProperty<Dictionary<TagName, int>>.RealValue IProperty<Dictionary<TagName, int>>.SetBaseValue(Dictionary<TagName, int>) ILoadFromConfigProperty.LoadFromConfig(dynamic) IPropertyBase.PropertyName IPropertyBase.OnSetFullName(string) IPropertyBase.GetFullName() IPropertyBase.GetBaseValue() IPropertyBase.SetBaseValue(object) IPropertyBase.GetInitialValue() IPropertyBase.GetRealValue() IPropertyBase.GetDependentProperties() IPropertyBase.SetDependentProperties(params PropertyNameInfo[]) IPropertyBase.Initialize(IPropertyBase[], string) IPropertyBase.OnRecycled() IPropertyBase.SetModifier<T>(IPropertyDependencyModifier<T>) Namespace: Runtime.DataFramework.Properties.TagProperty Assembly: MainGame.dll Syntax public interface ITagProperty : IProperty<Dictionary<TagName, int>>, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetTagLevel(TagName) Get the level of a tag. If the entity doesn't have this tag, an exception will be thrown Declaration int GetTagLevel(TagName tagName) Parameters Type Name Description TagName tagName Returns Type Description int | Improve this Doc View Source GetTags() Get all tags of this entity Declaration Tag[] GetTags() Returns Type Description Tag[] | Improve this Doc View Source HasTag(TagName) Check if this entity has a tag Declaration bool HasTag(TagName tagName) Parameters Type Name Description TagName tagName Returns Type Description bool | Improve this Doc View Source HasTag(TagName, out int) Check if this entity has a tag and get its level if it has Declaration bool HasTag(TagName tagName, out int level) Parameters Type Name Description TagName tagName int level Returns Type Description bool | Improve this Doc View Source HasTagOverLevel(TagName, int) Check if this entity has a tag with a level greater than or equal to the given level. If the entity doesn't have this tag, it will always return false Declaration bool HasTagOverLevel(TagName tagName, int level) Parameters Type Name Description TagName tagName int level Returns Type Description bool"
  },
  "api/Runtime.DataFramework.Properties.TagProperty.TagName.html": {
    "href": "api/Runtime.DataFramework.Properties.TagProperty.TagName.html",
    "title": "Enum TagName | Example Unity documentation",
    "keywords": "Enum TagName Namespace: Runtime.DataFramework.Properties.TagProperty Assembly: MainGame.dll Syntax public enum TagName Fields Name Description Test_Flame Test_Ice Test_Wood"
  },
  "api/Runtime.DataFramework.Properties.TagProperty.TagProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.TagProperty.TagProperty.html",
    "title": "Class TagProperty | Example Unity documentation",
    "keywords": "Class TagProperty Inheritance object Property<Dictionary<TagName, int>> DictionaryProperty<TagName, int> LoadFromConfigDictProperty<TagName, int> TagProperty Implements IDictionaryProperty<TagName, int> ITagProperty IProperty<Dictionary<TagName, int>> ILoadFromConfigProperty IPropertyBase Inherited Members LoadFromConfigDictProperty<TagName, int>.LoadFromConfig(dynamic) LoadFromConfigDictProperty<TagName, int>.OnSetBaseValueFromConfig(dynamic) DictionaryProperty<TagName, int>.RealValue DictionaryProperty<TagName, int>.RealValues DictionaryProperty<TagName, int>.OnClone(Dictionary<TagName, int>) Property<Dictionary<TagName, int>>.PropertyName Property<Dictionary<TagName, int>>.fullName Property<Dictionary<TagName, int>>.BaseValue Property<Dictionary<TagName, int>>.InitialValue Property<Dictionary<TagName, int>>.RealValue Property<Dictionary<TagName, int>>.overrideDependentProperties Property<Dictionary<TagName, int>>.SetBaseValue(Dictionary<TagName, int>) Property<Dictionary<TagName, int>>.OnSetFullName(string) Property<Dictionary<TagName, int>>.GetFullName() Property<Dictionary<TagName, int>>.modifier Property<Dictionary<TagName, int>>.OnRecycled() Property<Dictionary<TagName, int>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<Dictionary<TagName, int>>.GetDefautModifier() Property<Dictionary<TagName, int>>.GetPropertyName() Property<Dictionary<TagName, int>>.GetDefaultDependentProperties() Property<Dictionary<TagName, int>>.GetDependentProperties() Property<Dictionary<TagName, int>>.SetDependentProperties(params PropertyNameInfo[]) Property<Dictionary<TagName, int>>.Initialize(IPropertyBase[], string) Property<Dictionary<TagName, int>>.OnClone(Dictionary<TagName, int>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties.TagProperty Assembly: MainGame.dll Syntax public class TagProperty : LoadFromConfigDictProperty<TagName, int>, IDictionaryProperty<TagName, int>, ITagProperty, IProperty<Dictionary<TagName, int>>, ILoadFromConfigProperty, IPropertyBase Constructors | Improve this Doc View Source TagProperty() Declaration public TagProperty() | Improve this Doc View Source TagProperty(Dictionary<TagName, int>) Declaration public TagProperty(Dictionary<TagName, int> tags) Parameters Type Name Description Dictionary<TagName, int> tags Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<Dictionary<TagName, int>>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<Dictionary<TagName, int>> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<Dictionary<TagName, int>> Overrides Property<Dictionary<TagName, int>>.GetDefautModifier() | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<Dictionary<TagName, int>>.GetPropertyName() | Improve this Doc View Source GetTagLevel(TagName) Get the level of a tag. If the entity doesn't have this tag, an exception will be thrown Declaration public int GetTagLevel(TagName tagName) Parameters Type Name Description TagName tagName Returns Type Description int | Improve this Doc View Source GetTags() Get all tags of this entity Declaration public Tag[] GetTags() Returns Type Description Tag[] | Improve this Doc View Source HasTag(TagName) Check if this entity has a tag Declaration public bool HasTag(TagName tagName) Parameters Type Name Description TagName tagName Returns Type Description bool | Improve this Doc View Source HasTag(TagName, out int) Check if this entity has a tag and get its level if it has Declaration public bool HasTag(TagName tagName, out int level) Parameters Type Name Description TagName tagName int level Returns Type Description bool | Improve this Doc View Source HasTagOverLevel(TagName, int) Check if this entity has a tag with a level greater than or equal to the given level. If the entity doesn't have this tag, it will always return false Declaration public bool HasTagOverLevel(TagName tagName, int level) Parameters Type Name Description TagName tagName int level Returns Type Description bool | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override Dictionary<TagName, int> OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description Dictionary<TagName, int> Overrides LoadFromConfigDictProperty<TagName, int>.OnSetBaseValueFromConfig(dynamic) Implements IDictionaryProperty<TKey, T> ITagProperty IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.TagProperty.html": {
    "href": "api/Runtime.DataFramework.Properties.TagProperty.html",
    "title": "Namespace Runtime.DataFramework.Properties.TagProperty | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Properties.TagProperty Classes TagProperty Interfaces ITagProperty Property for tags Enums TagName"
  },
  "api/Runtime.DataFramework.Properties.Taste.html": {
    "href": "api/Runtime.DataFramework.Properties.Taste.html",
    "title": "Class Taste | Example Unity documentation",
    "keywords": "Class Taste Inheritance object Property<List<TasteType>> ListProperty<TasteType> IndependentListProperty<TasteType> IndependentLoadFromConfigListProperty<TasteType> Taste Implements ITasteProperty IListProperty<TasteType> IProperty<List<TasteType>> ILoadFromConfigProperty IPropertyBase Inherited Members IndependentLoadFromConfigListProperty<TasteType>.LoadFromConfig(dynamic) IndependentListProperty<TasteType>.GetDefautModifier() IndependentListProperty<TasteType>.GetDefaultDependentProperties() ListProperty<TasteType>.RealValue ListProperty<TasteType>.RealValues ListProperty<TasteType>.SetBaseValue(List<TasteType>) ListProperty<TasteType>.OnClone(List<TasteType>) Property<List<TasteType>>.PropertyName Property<List<TasteType>>.fullName Property<List<TasteType>>.BaseValue Property<List<TasteType>>.InitialValue Property<List<TasteType>>.overrideDependentProperties Property<List<TasteType>>.OnSetFullName(string) Property<List<TasteType>>.GetFullName() Property<List<TasteType>>.modifier Property<List<TasteType>>.OnRecycled() Property<List<TasteType>>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<List<TasteType>>.GetDependentProperties() Property<List<TasteType>>.SetDependentProperties(params PropertyNameInfo[]) Property<List<TasteType>>.Initialize(IPropertyBase[], string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class Taste : IndependentLoadFromConfigListProperty<TasteType>, ITasteProperty, IListProperty<TasteType>, IProperty<List<TasteType>>, ILoadFromConfigProperty, IPropertyBase Constructors | Improve this Doc View Source Taste() Declaration public Taste() | Improve this Doc View Source Taste(params TasteType[]) Declaration public Taste(params TasteType[] baseValues) Parameters Type Name Description TasteType[] baseValues Methods | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<List<TasteType>>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override List<TasteType> OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description List<TasteType> Overrides IndependentLoadFromConfigListProperty<TasteType>.OnSetBaseValueFromConfig(dynamic) Implements ITasteProperty IListProperty<T> IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.TasteType.html": {
    "href": "api/Runtime.DataFramework.Properties.TasteType.html",
    "title": "Enum TasteType | Example Unity documentation",
    "keywords": "Enum TasteType Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public enum TasteType Fields Name Description Type1 Type2 Type3"
  },
  "api/Runtime.DataFramework.Properties.Vigiliance.html": {
    "href": "api/Runtime.DataFramework.Properties.Vigiliance.html",
    "title": "Class Vigiliance | Example Unity documentation",
    "keywords": "Class Vigiliance Inheritance object Property<float> AbstractLoadFromConfigProperty<float> Vigiliance Implements IVigilianceProperty IProperty<float> ILoadFromConfigProperty IPropertyBase Inherited Members AbstractLoadFromConfigProperty<float>.LoadFromConfig(dynamic) Property<float>.PropertyName Property<float>.fullName Property<float>.BaseValue Property<float>.InitialValue Property<float>.RealValue Property<float>.overrideDependentProperties Property<float>.SetBaseValue(float) Property<float>.OnSetFullName(string) Property<float>.GetFullName() Property<float>.modifier Property<float>.OnRecycled() Property<float>.SetModifier<ValueType>(IPropertyDependencyModifier<ValueType>) Property<float>.GetDependentProperties() Property<float>.SetDependentProperties(params PropertyNameInfo[]) Property<float>.Initialize(IPropertyBase[], string) Property<float>.OnClone(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class Vigiliance : AbstractLoadFromConfigProperty<float>, IVigilianceProperty, IProperty<float>, ILoadFromConfigProperty, IPropertyBase Methods | Improve this Doc View Source GetDefaultDependentProperties() Declaration public override PropertyNameInfo[] GetDefaultDependentProperties() Returns Type Description PropertyNameInfo[] Overrides Property<float>.GetDefaultDependentProperties() | Improve this Doc View Source GetDefautModifier() Using Get instead of property to avoid ES3 serialization Declaration protected override IPropertyDependencyModifier<float> GetDefautModifier() Returns Type Description IPropertyDependencyModifier<float> Overrides Property<float>.GetDefautModifier() | Improve this Doc View Source GetPropertyName() Declaration protected override PropertyName GetPropertyName() Returns Type Description PropertyName Overrides Property<float>.GetPropertyName() | Improve this Doc View Source OnSetBaseValueFromConfig(dynamic) Declaration public override float OnSetBaseValueFromConfig(dynamic value) Parameters Type Name Description dynamic value Returns Type Description float Overrides AbstractLoadFromConfigProperty<float>.OnSetBaseValueFromConfig(dynamic) Implements IVigilianceProperty IProperty<T> ILoadFromConfigProperty IPropertyBase"
  },
  "api/Runtime.DataFramework.Properties.VigilianceDefaultModifier.html": {
    "href": "api/Runtime.DataFramework.Properties.VigilianceDefaultModifier.html",
    "title": "Class VigilianceDefaultModifier | Example Unity documentation",
    "keywords": "Class VigilianceDefaultModifier Inheritance object PropertyDependencyModifier<float> VigilianceDefaultModifier Implements IPropertyDependencyModifier<float> Inherited Members PropertyDependencyModifier<float>.dependenciesInType PropertyDependencyModifier<float>.Modify(float, IPropertyBase[], string, string) PropertyDependencyModifier<float>.GetModifierParameterFromConfig<T>(string, T) PropertyDependencyModifier<float>.GetDependency<T>(PropertyNameInfo) PropertyDependencyModifier<float>.GetDependency(PropertyNameInfo) PropertyDependencyModifier<float>.GetDependency<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.Properties Assembly: MainGame.dll Syntax public class VigilianceDefaultModifier : PropertyDependencyModifier<float>, IPropertyDependencyModifier<float> Methods | Improve this Doc View Source OnModify(float) Declaration public override float OnModify(float propertyValue) Parameters Type Name Description float propertyValue Returns Type Description float Overrides PropertyDependencyModifier<float>.OnModify(float) Implements IPropertyDependencyModifier<T>"
  },
  "api/Runtime.DataFramework.Properties.html": {
    "href": "api/Runtime.DataFramework.Properties.html",
    "title": "Namespace Runtime.DataFramework.Properties | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.Properties Namespaces Runtime.DataFramework.Properties.CustomProperties Runtime.DataFramework.Properties.TagProperty Classes AbstractLoadFromConfigProperty<T> AttackRange AttackRangeDefaultModifier Danger DangerDefaultModifier DictionaryProperty<TKey, T> EmptyModifier<T> Health HealthDefaultModifier IndependentListProperty<T> Independent Properties are properties without any dependencies IndependentLoadFromConfigListProperty<T> IndependentLoadFromConfigProperty<T> IndependentProperty<T> Independent Properties are properties without any dependencies ListProperty<T> Use PropertyList instead if you want the values to be property as well. If your values are not property, use this class LoadFromConfigDictProperty<TKey, T> PropertyDependencyModifier<T> No need to be ES3 serialized PropertyDictionaryLoadFromConfig<TKey, T> PropertyDictionary<TKey, T> PropertyList<T> Use ListProperty instead if your values are not properties. If your values are properties, use this class Property<T> Rarity SerializedChildPropertyInfo Taste Vigiliance VigilianceDefaultModifier Structs HealthInfo PropertyNameInfo Interfaces IAttackRangeProperty IDangerProperty IDictionaryProperty<TKey, T> IHaveSubProperties IHealthProperty IListProperty<T> ILoadFromConfigProperty IPropertyBase IPropertyDependencyModifier<T> IPropertyDictionary<TKey, T> IProperty<T> IRarityProperty ITasteProperty IVigilianceProperty Enums PropertyName TasteType"
  },
  "api/Runtime.DataFramework.ViewControllers.AbstractEntityViewController-2.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.AbstractEntityViewController-2.html",
    "title": "Class AbstractEntityViewController<T, TEntityModel> | Example Unity documentation",
    "keywords": "Class AbstractEntityViewController<T, TEntityModel> Inheritance object Object Component Behaviour MonoBehaviour AbstractMikroController<MainGame> AbstractEntityViewController<T, TEntityModel> AbstractHaveCustomPropertyEntityViewController<T, TEntityModel> Implements IEntityViewController IController ICanSendCommand ICanGetSystem ICanGetModel ICanRegisterEvent ICanSendQuery ICanGetUtility IBelongToArchitecture Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Runtime.DataFramework.ViewControllers Assembly: MainGame.dll Syntax public abstract class AbstractEntityViewController<T, TEntityModel> : AbstractMikroController<MainGame>, IEntityViewController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture where T : class, IEntity, new() where TEntityModel : class, IEntityModel Type Parameters Name Description T TEntityModel Fields | Improve this Doc View Source autoRemoveEntityWhenDestroyed Declaration [SerializeField] protected bool autoRemoveEntityWhenDestroyed Field Value Type Description bool | Improve this Doc View Source entityModel Declaration protected TEntityModel entityModel Field Value Type Description TEntityModel | Improve this Doc View Source properties Declaration protected List<PropertyInfo> properties Field Value Type Description List<PropertyInfo> Properties | Improve this Doc View Source BindedEntity Declaration protected T BindedEntity { get; } Property Value Type Description T | Improve this Doc View Source ID Declaration public string ID { get; set; } Property Value Type Description string Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source Bind<T>(string, BindableProperty<T>, Action<T, T>) Automatically bind a BindableProperty to a property, the generic type of BindableProperty must be the same as the property Declaration protected void Bind<T>(string bindedPropertyName, BindableProperty<T> bindableProperty, Action<T, T> callback = null) Parameters Type Name Description string bindedPropertyName BindableProperty<T> bindableProperty Action<T, T> callback Type Parameters Name Description T Type of the property, as well as the generic type of your bindable property | Improve this Doc View Source Bind<T>(string, IBindableProperty, Func<dynamic, T>, Action<T, T>) Declaration protected void Bind<T>(string bindedPropertyName, IBindableProperty bindableProperty, Func<dynamic, T> getter, Action<T, T> callback) Parameters Type Name Description string bindedPropertyName IBindableProperty bindableProperty Func<dynamic, T> getter Action<T, T> callback Type Parameters Name Description T | Improve this Doc View Source Bind<IPropertyType>(string, Action<dynamic, dynamic>) Automatically bind propertyName property to the real value of IPropertyType of th entity. This will not bind to nested properties This is not recommended though it's convenient, because it will cost more performance Declaration protected void Bind<IPropertyType>(string bindedPropertyName, Action<dynamic, dynamic> callback = null) where IPropertyType : class, IPropertyBase Parameters Type Name Description string bindedPropertyName Action<dynamic, dynamic> callback Type Parameters Name Description IPropertyType | Improve this Doc View Source Bind<BindedDataType, TargetType>(string, BindableProperty<BindedDataType>, Func<BindedDataType, TargetType>, Action<TargetType, TargetType>) Bind a BindableProperty to a property, with custom getter in case the property is not the same type as the BindableProperty Declaration protected void Bind<BindedDataType, TargetType>(string bindedPropertyName, BindableProperty<BindedDataType> bindableProperty, Func<BindedDataType, TargetType> getter, Action<TargetType, TargetType> callback = null) Parameters Type Name Description string bindedPropertyName BindableProperty<BindedDataType> bindableProperty Func<BindedDataType, TargetType> getter your custom getter, should return something with the same type as the target Action<TargetType, TargetType> callback Type Parameters Name Description BindedDataType Type of the value of the source property TargetType type of the target property | Improve this Doc View Source ForceUpdatePropertyBindings() Declaration protected void ForceUpdatePropertyBindings() | Improve this Doc View Source Init(string, IEntity) Declaration public void Init(string id, IEntity entity) Parameters Type Name Description string id IEntity entity | Improve this Doc View Source OnBindEntityProperty() Declaration protected abstract void OnBindEntityProperty() | Improve this Doc View Source OnBindProperty() Declaration protected void OnBindProperty() | Improve this Doc View Source OnDestroy() Declaration protected virtual void OnDestroy() | Improve this Doc View Source OnEntityStart() Declaration protected abstract void OnEntityStart() | Improve this Doc View Source OnInitEntity() Declaration protected abstract IEntity OnInitEntity() Returns Type Description IEntity | Improve this Doc View Source Start() Declaration protected virtual void Start() | Improve this Doc View Source UpdateBinding<T, BindablePropertyType>(IBindableProperty, PropertyInfo, Func<BindablePropertyType, T>, Action<T, T>) Declaration protected void UpdateBinding<T, BindablePropertyType>(IBindableProperty bindableProperty, PropertyInfo bindedProperty, Func<BindablePropertyType, T> getter, Action<T, T> callback) Parameters Type Name Description IBindableProperty bindableProperty PropertyInfo bindedProperty Func<BindablePropertyType, T> getter Action<T, T> callback Type Parameters Name Description T BindablePropertyType Implements IEntityViewController MikroFramework.Architecture.IController MikroFramework.Architecture.ICanSendCommand MikroFramework.Architecture.ICanGetSystem MikroFramework.Architecture.ICanGetModel MikroFramework.Architecture.ICanRegisterEvent MikroFramework.ICanSendQuery MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Runtime.DataFramework.ViewControllers.AbstractHaveCustomPropertyEntityViewController-2.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.AbstractHaveCustomPropertyEntityViewController-2.html",
    "title": "Class AbstractHaveCustomPropertyEntityViewController<T, TEntityModel> | Example Unity documentation",
    "keywords": "Class AbstractHaveCustomPropertyEntityViewController<T, TEntityModel> Inheritance object Object Component Behaviour MonoBehaviour AbstractMikroController<MainGame> AbstractEntityViewController<T, TEntityModel> AbstractHaveCustomPropertyEntityViewController<T, TEntityModel> AbstractEnemyViewController<T> Implements IEntityViewController IController ICanSendCommand ICanGetSystem ICanGetModel ICanRegisterEvent ICanSendQuery ICanGetUtility IBelongToArchitecture Inherited Members AbstractEntityViewController<T, TEntityModel>.ID AbstractEntityViewController<T, TEntityModel>.autoRemoveEntityWhenDestroyed AbstractEntityViewController<T, TEntityModel>.entityModel AbstractEntityViewController<T, TEntityModel>.BindedEntity AbstractEntityViewController<T, TEntityModel>.properties AbstractEntityViewController<T, TEntityModel>.Init(string, IEntity) AbstractEntityViewController<T, TEntityModel>.Awake() AbstractEntityViewController<T, TEntityModel>.Start() AbstractEntityViewController<T, TEntityModel>.OnInitEntity() AbstractEntityViewController<T, TEntityModel>.OnBindProperty() AbstractEntityViewController<T, TEntityModel>.OnEntityStart() AbstractEntityViewController<T, TEntityModel>.OnBindEntityProperty() AbstractEntityViewController<T, TEntityModel>.Bind<IPropertyType>(string, Action<dynamic, dynamic>) AbstractEntityViewController<T, TEntityModel>.Bind<T>(string, BindableProperty<T>, Action<T, T>) AbstractEntityViewController<T, TEntityModel>.Bind<BindedDataType, TargetType>(string, BindableProperty<BindedDataType>, Func<BindedDataType, TargetType>, Action<TargetType, TargetType>) AbstractEntityViewController<T, TEntityModel>.Bind<T>(string, IBindableProperty, Func<dynamic, T>, Action<T, T>) AbstractEntityViewController<T, TEntityModel>.UpdateBinding<T, BindablePropertyType>(IBindableProperty, PropertyInfo, Func<BindablePropertyType, T>, Action<T, T>) AbstractEntityViewController<T, TEntityModel>.ForceUpdatePropertyBindings() AbstractEntityViewController<T, TEntityModel>.OnDestroy() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Runtime.DataFramework.ViewControllers Assembly: MainGame.dll Syntax public abstract class AbstractHaveCustomPropertyEntityViewController<T, TEntityModel> : AbstractEntityViewController<T, TEntityModel>, IEntityViewController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture where T : class, IHaveCustomProperties, new() where TEntityModel : class, IEntityModel Type Parameters Name Description T TEntityModel Methods | Improve this Doc View Source BindCustomData<T>(string, string, string, Action<T, T?>) Declaration protected void BindCustomData<T>(string bindedPropertyName, string customPropertyName, string customDataName, Action<T, T?> callback = null) Parameters Type Name Description string bindedPropertyName string customPropertyName string customDataName Action<T, T> callback Type Parameters Name Description T | Improve this Doc View Source BindCustomData<TargetType>(string, string, string, Func<dynamic, TargetType>, Action<TargetType, TargetType>) Declaration protected void BindCustomData<TargetType>(string bindedPropertyName, string customPropertyName, string customDataName, Func<dynamic, TargetType> getter, Action<TargetType, TargetType> callback = null) Parameters Type Name Description string bindedPropertyName string customPropertyName string customDataName Func<dynamic, TargetType> getter Action<TargetType, TargetType> callback Type Parameters Name Description TargetType Implements IEntityViewController MikroFramework.Architecture.IController MikroFramework.Architecture.ICanSendCommand MikroFramework.Architecture.ICanGetSystem MikroFramework.Architecture.ICanGetModel MikroFramework.Architecture.ICanRegisterEvent MikroFramework.ICanSendQuery MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Runtime.DataFramework.ViewControllers.Enemies.AbstractEnemyViewController-1.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.Enemies.AbstractEnemyViewController-1.html",
    "title": "Class AbstractEnemyViewController<T> | Example Unity documentation",
    "keywords": "Class AbstractEnemyViewController<T> Inheritance object Object Component Behaviour MonoBehaviour AbstractMikroController<MainGame> AbstractEntityViewController<T, IEnemyEntityModel> AbstractHaveCustomPropertyEntityViewController<T, IEnemyEntityModel> AbstractEnemyViewController<T> Implements IEnemyViewController IEntityViewController IController ICanSendCommand ICanGetSystem ICanGetModel ICanRegisterEvent ICanSendQuery ICanGetUtility IBelongToArchitecture Inherited Members AbstractHaveCustomPropertyEntityViewController<T, IEnemyEntityModel>.BindCustomData<T>(string, string, string, Action<T, T>) AbstractHaveCustomPropertyEntityViewController<T, IEnemyEntityModel>.BindCustomData<TargetType>(string, string, string, Func<dynamic, TargetType>, Action<TargetType, TargetType>) AbstractEntityViewController<T, IEnemyEntityModel>.ID AbstractEntityViewController<T, IEnemyEntityModel>.autoRemoveEntityWhenDestroyed AbstractEntityViewController<T, IEnemyEntityModel>.entityModel AbstractEntityViewController<T, IEnemyEntityModel>.BindedEntity AbstractEntityViewController<T, IEnemyEntityModel>.properties AbstractEntityViewController<T, IEnemyEntityModel>.Init(string, IEntity) AbstractEntityViewController<T, IEnemyEntityModel>.Awake() AbstractEntityViewController<T, IEnemyEntityModel>.Start() AbstractEntityViewController<T, IEnemyEntityModel>.OnInitEntity() AbstractEntityViewController<T, IEnemyEntityModel>.OnBindProperty() AbstractEntityViewController<T, IEnemyEntityModel>.OnEntityStart() AbstractEntityViewController<T, IEnemyEntityModel>.OnBindEntityProperty() AbstractEntityViewController<T, IEnemyEntityModel>.Bind<IPropertyType>(string, Action<dynamic, dynamic>) AbstractEntityViewController<T, IEnemyEntityModel>.Bind<T>(string, BindableProperty<T>, Action<T, T>) AbstractEntityViewController<T, IEnemyEntityModel>.Bind<BindedDataType, TargetType>(string, BindableProperty<BindedDataType>, Func<BindedDataType, TargetType>, Action<TargetType, TargetType>) AbstractEntityViewController<T, IEnemyEntityModel>.Bind<T>(string, IBindableProperty, Func<dynamic, T>, Action<T, T>) AbstractEntityViewController<T, IEnemyEntityModel>.UpdateBinding<T, BindablePropertyType>(IBindableProperty, PropertyInfo, Func<BindablePropertyType, T>, Action<T, T>) AbstractEntityViewController<T, IEnemyEntityModel>.ForceUpdatePropertyBindings() AbstractEntityViewController<T, IEnemyEntityModel>.OnDestroy() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Runtime.DataFramework.ViewControllers.Enemies Assembly: MainGame.dll Syntax public abstract class AbstractEnemyViewController<T> : AbstractHaveCustomPropertyEntityViewController<T, IEnemyEntityModel>, IEnemyViewController, IEntityViewController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture where T : class, IEnemyEntity, new() Type Parameters Name Description T Fields | Improve this Doc View Source enemyEntityModel Declaration protected IEnemyEntityModel enemyEntityModel Field Value Type Description IEnemyEntityModel Properties | Improve this Doc View Source AttackRange Declaration public float AttackRange { get; } Property Value Type Description float | Improve this Doc View Source CurrentHealth Declaration public int CurrentHealth { get; } Property Value Type Description int | Improve this Doc View Source Danger Declaration public int Danger { get; } Property Value Type Description int | Improve this Doc View Source MaxHealth Declaration public int MaxHealth { get; } Property Value Type Description int | Improve this Doc View Source Vigiliance Declaration public float Vigiliance { get; } Property Value Type Description float Methods | Improve this Doc View Source Awake() Declaration protected override void Awake() Overrides AbstractEntityViewController<T, IEnemyEntityModel>.Awake() | Improve this Doc View Source GetCurrentHealth(dynamic) Declaration protected dynamic GetCurrentHealth(dynamic info) Parameters Type Name Description dynamic info Returns Type Description dynamic | Improve this Doc View Source GetMaxHealth(dynamic) Declaration protected dynamic GetMaxHealth(dynamic info) Parameters Type Name Description dynamic info Returns Type Description dynamic | Improve this Doc View Source OnBindEntityProperty() Declaration protected override void OnBindEntityProperty() Overrides AbstractEntityViewController<T, IEnemyEntityModel>.OnBindEntityProperty() | Improve this Doc View Source OnCurrentHealthChanged(int, int) Declaration protected void OnCurrentHealthChanged(int oldValue, int newValue) Parameters Type Name Description int oldValue int newValue | Improve this Doc View Source OnInitEnemyEntity(EnemyBuilder<T>) Declaration protected abstract IEnemyEntity OnInitEnemyEntity(EnemyBuilder<T> builder) Parameters Type Name Description EnemyBuilder<T> builder Returns Type Description IEnemyEntity | Improve this Doc View Source OnInitEntity() Declaration protected override IEntity OnInitEntity() Returns Type Description IEntity Overrides AbstractEntityViewController<T, IEnemyEntityModel>.OnInitEntity() Implements IEnemyViewController IEntityViewController MikroFramework.Architecture.IController MikroFramework.Architecture.ICanSendCommand MikroFramework.Architecture.ICanGetSystem MikroFramework.Architecture.ICanGetModel MikroFramework.Architecture.ICanRegisterEvent MikroFramework.ICanSendQuery MikroFramework.Architecture.ICanGetUtility MikroFramework.Architecture.IBelongToArchitecture"
  },
  "api/Runtime.DataFramework.ViewControllers.Enemies.BindAttribute.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.Enemies.BindAttribute.html",
    "title": "Class BindAttribute | Example Unity documentation",
    "keywords": "Class BindAttribute Inheritance object Attribute BindAttribute BindCustomDataAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.ViewControllers.Enemies Assembly: MainGame.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class BindAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source BindAttribute(PropertyName) Declaration public BindAttribute(PropertyName propertyName) Parameters Type Name Description PropertyName propertyName | Improve this Doc View Source BindAttribute(PropertyName, string) Declaration public BindAttribute(PropertyName propertyName, string getterMethodName) Parameters Type Name Description PropertyName propertyName string getterMethodName | Improve this Doc View Source BindAttribute(PropertyName, string, string) Declaration public BindAttribute(PropertyName propertyName, string getterMethodName, string onChangedMethodName) Parameters Type Name Description PropertyName propertyName string getterMethodName string onChangedMethodName | Improve this Doc View Source BindAttribute(string) Declaration public BindAttribute(string propertyFullNaame) Parameters Type Name Description string propertyFullNaame | Improve this Doc View Source BindAttribute(string, string) Declaration public BindAttribute(string propertyFullNaame, string getterMethodName) Parameters Type Name Description string propertyFullNaame string getterMethodName | Improve this Doc View Source BindAttribute(string, string, string) Declaration public BindAttribute(string propertyFullNaame, string getterMethodName, string onChangedMethodName) Parameters Type Name Description string propertyFullNaame string getterMethodName string onChangedMethodName Properties | Improve this Doc View Source GetterMethodName Declaration public string GetterMethodName { get; set; } Property Value Type Description string | Improve this Doc View Source OnChanged Declaration public string OnChanged { get; set; } Property Value Type Description string | Improve this Doc View Source PropertyName Declaration public PropertyNameInfo PropertyName { get; } Property Value Type Description PropertyNameInfo Implements _Attribute"
  },
  "api/Runtime.DataFramework.ViewControllers.Enemies.BindCustomDataAttribute.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.Enemies.BindCustomDataAttribute.html",
    "title": "Class BindCustomDataAttribute | Example Unity documentation",
    "keywords": "Class BindCustomDataAttribute Inheritance object Attribute BindAttribute BindCustomDataAttribute Implements _Attribute Inherited Members BindAttribute.PropertyName BindAttribute.GetterMethodName BindAttribute.OnChanged Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.DataFramework.ViewControllers.Enemies Assembly: MainGame.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class BindCustomDataAttribute : BindAttribute, _Attribute Constructors | Improve this Doc View Source BindCustomDataAttribute(string, string) Declaration public BindCustomDataAttribute(string customPropertyName, string customPropertyDataName) Parameters Type Name Description string customPropertyName string customPropertyDataName | Improve this Doc View Source BindCustomDataAttribute(string, string, string) Declaration public BindCustomDataAttribute(string customPropertyName, string customPropertyDataName, string getterMethodName) Parameters Type Name Description string customPropertyName string customPropertyDataName string getterMethodName | Improve this Doc View Source BindCustomDataAttribute(string, string, string, string) Declaration public BindCustomDataAttribute(string customPropertyName, string customPropertyDataName, string getterMethodName, string onChangedMethodName) Parameters Type Name Description string customPropertyName string customPropertyDataName string getterMethodName string onChangedMethodName Properties | Improve this Doc View Source CustomDataName Declaration public string CustomDataName { get; } Property Value Type Description string Implements _Attribute"
  },
  "api/Runtime.DataFramework.ViewControllers.Enemies.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.Enemies.html",
    "title": "Namespace Runtime.DataFramework.ViewControllers.Enemies | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.ViewControllers.Enemies Classes AbstractEnemyViewController<T> BindAttribute BindCustomDataAttribute"
  },
  "api/Runtime.DataFramework.ViewControllers.IEnemyViewController.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.IEnemyViewController.html",
    "title": "Interface IEnemyViewController | Example Unity documentation",
    "keywords": "Interface IEnemyViewController Inherited Members IEntityViewController.ID IEntityViewController.Entity IEntityViewController.Init(string, IEntity) IBelongToArchitecture.GetArchitecture() Namespace: Runtime.DataFramework.ViewControllers Assembly: MainGame.dll Syntax public interface IEnemyViewController : IEntityViewController, IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture Properties | Improve this Doc View Source EnemyEntity Declaration IEnemyEntity EnemyEntity { get; } Property Value Type Description IEnemyEntity"
  },
  "api/Runtime.DataFramework.ViewControllers.IEntityViewController.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.IEntityViewController.html",
    "title": "Interface IEntityViewController | Example Unity documentation",
    "keywords": "Interface IEntityViewController Inherited Members IBelongToArchitecture.GetArchitecture() Namespace: Runtime.DataFramework.ViewControllers Assembly: MainGame.dll Syntax public interface IEntityViewController : IController, ICanSendCommand, ICanGetSystem, ICanGetModel, ICanRegisterEvent, ICanSendQuery, ICanGetUtility, IBelongToArchitecture Properties | Improve this Doc View Source Entity Declaration IEntity Entity { get; } Property Value Type Description IEntity | Improve this Doc View Source ID Declaration string ID { get; } Property Value Type Description string Methods | Improve this Doc View Source Init(string, IEntity) Declaration void Init(string id, IEntity entity) Parameters Type Name Description string id IEntity entity"
  },
  "api/Runtime.DataFramework.ViewControllers.html": {
    "href": "api/Runtime.DataFramework.ViewControllers.html",
    "title": "Namespace Runtime.DataFramework.ViewControllers | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework.ViewControllers Namespaces Runtime.DataFramework.ViewControllers.Enemies Classes AbstractEntityViewController<T, TEntityModel> AbstractHaveCustomPropertyEntityViewController<T, TEntityModel> Interfaces IEnemyViewController IEntityViewController"
  },
  "api/Runtime.DataFramework.html": {
    "href": "api/Runtime.DataFramework.html",
    "title": "Namespace Runtime.DataFramework | Example Unity documentation",
    "keywords": "Namespace Runtime.DataFramework Namespaces Runtime.DataFramework.Entities Runtime.DataFramework.Properties Runtime.DataFramework.ViewControllers"
  },
  "api/Runtime.Utilities.BindableDictExtensionUnregisterOnAdd-2.html": {
    "href": "api/Runtime.Utilities.BindableDictExtensionUnregisterOnAdd-2.html",
    "title": "Class BindableDictExtensionUnregisterOnAdd<TKey, TValue> | Example Unity documentation",
    "keywords": "Class BindableDictExtensionUnregisterOnAdd<TKey, TValue> Inheritance object BindableDictExtensionUnregisterOnAdd<TKey, TValue> Implements IUnRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities Assembly: MainGame.dll Syntax public class BindableDictExtensionUnregisterOnAdd<TKey, TValue> : IUnRegister Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source BindableDictExtensionUnregisterOnAdd(BindableDictionary<TKey, TValue>, Action<TKey, TValue>) Declaration public BindableDictExtensionUnregisterOnAdd(BindableDictionary<TKey, TValue> bindable, Action<TKey, TValue> onValueChanged) Parameters Type Name Description BindableDictionary<TKey, TValue> bindable Action<TKey, TValue> onValueChanged Properties | Improve this Doc View Source Bindable Declaration public BindableDictionary<TKey, TValue> Bindable { get; set; } Property Value Type Description BindableDictionary<TKey, TValue> | Improve this Doc View Source OnValueChanged Declaration public Action<TKey, TValue> OnValueChanged { get; set; } Property Value Type Description Action<TKey, TValue> Methods | Improve this Doc View Source UnRegister() Declaration public void UnRegister() Implements MikroFramework.Event.IUnRegister"
  },
  "api/Runtime.Utilities.BindableDictExtensionUnregisterOnRemove-2.html": {
    "href": "api/Runtime.Utilities.BindableDictExtensionUnregisterOnRemove-2.html",
    "title": "Class BindableDictExtensionUnregisterOnRemove<TKey, TValue> | Example Unity documentation",
    "keywords": "Class BindableDictExtensionUnregisterOnRemove<TKey, TValue> Inheritance object BindableDictExtensionUnregisterOnRemove<TKey, TValue> Implements IUnRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities Assembly: MainGame.dll Syntax public class BindableDictExtensionUnregisterOnRemove<TKey, TValue> : IUnRegister Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source BindableDictExtensionUnregisterOnRemove(BindableDictionary<TKey, TValue>, Action<TKey, TValue>) Declaration public BindableDictExtensionUnregisterOnRemove(BindableDictionary<TKey, TValue> bindable, Action<TKey, TValue> onValueChanged) Parameters Type Name Description BindableDictionary<TKey, TValue> bindable Action<TKey, TValue> onValueChanged Properties | Improve this Doc View Source Bindable Declaration public BindableDictionary<TKey, TValue> Bindable { get; set; } Property Value Type Description BindableDictionary<TKey, TValue> | Improve this Doc View Source OnValueChanged Declaration public Action<TKey, TValue> OnValueChanged { get; set; } Property Value Type Description Action<TKey, TValue> Methods | Improve this Doc View Source UnRegister() Declaration public void UnRegister() Implements MikroFramework.Event.IUnRegister"
  },
  "api/Runtime.Utilities.BindableDictionary-2.html": {
    "href": "api/Runtime.Utilities.BindableDictionary-2.html",
    "title": "Class BindableDictionary<TKey, TValue> | Example Unity documentation",
    "keywords": "Class BindableDictionary<TKey, TValue> Inheritance object BindableProperty<Dictionary<TKey, TValue>> BindableDictionary<TKey, TValue> Implements IBindableProperty IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members BindableProperty<Dictionary<TKey, TValue>>.Value BindableProperty<Dictionary<TKey, TValue>>.RegisterOnValueChaned(Action<Dictionary<TKey, TValue>>) BindableProperty<Dictionary<TKey, TValue>>.RegisterWithInitValue(Action<Dictionary<TKey, TValue>>) BindableProperty<Dictionary<TKey, TValue>>.RegisterWithInitValue(Action<Dictionary<TKey, TValue>, Dictionary<TKey, TValue>>) BindableProperty<Dictionary<TKey, TValue>>.ToString() BindableProperty<Dictionary<TKey, TValue>>.RegisterOnValueChaned(Action<Dictionary<TKey, TValue>, Dictionary<TKey, TValue>>) BindableProperty<Dictionary<TKey, TValue>>.UnRegisterOnValueChanged(Action<Dictionary<TKey, TValue>>) BindableProperty<Dictionary<TKey, TValue>>.UnRegisterOnValueChanged(Action<Dictionary<TKey, TValue>, Dictionary<TKey, TValue>>) BindableProperty<Dictionary<TKey, TValue>>.UnRegisterAll() BindableProperty<Dictionary<TKey, TValue>>.ObjectValue BindableProperty<Dictionary<TKey, TValue>>.RegisterOnObjectValueChaned(Action<object>) BindableProperty<Dictionary<TKey, TValue>>.RegisterOnObjectValueChaned(Action<object, object>) BindableProperty<Dictionary<TKey, TValue>>.RegisterWithInitObject(Action<object>) BindableProperty<Dictionary<TKey, TValue>>.RegisterWithInitObject(Action<object, object>) BindableProperty<Dictionary<TKey, TValue>>.UnRegisterOnObjectValueChanged(Action<object>) BindableProperty<Dictionary<TKey, TValue>>.UnRegisterOnObjectValueChanged(Action<object, object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities Assembly: MainGame.dll Syntax public class BindableDictionary<TKey, TValue> : BindableProperty<Dictionary<TKey, TValue>>, IBindableProperty, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source BindableDictionary(Dictionary<TKey, TValue>) Declaration public BindableDictionary(Dictionary<TKey, TValue> defaultValue = null) Parameters Type Name Description Dictionary<TKey, TValue> defaultValue Properties | Improve this Doc View Source this[TKey] Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key Property Value Type Description TValue Methods | Improve this Doc View Source AddAndInvoke(KeyValuePair<TKey, TValue>) Declaration public void AddAndInvoke(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item | Improve this Doc View Source AddAndInvoke(TKey, TValue) Declaration public void AddAndInvoke(TKey key, TValue value) Parameters Type Name Description TKey key TValue value | Improve this Doc View Source ClearAndInvoke() Declaration public void ClearAndInvoke() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<TKey, TValue>> | Improve this Doc View Source RegisterOnAdd(Action<TKey, TValue>) Declaration public BindableDictExtensionUnregisterOnAdd<TKey, TValue> RegisterOnAdd(Action<TKey, TValue> onAdd) Parameters Type Name Description Action<TKey, TValue> onAdd Returns Type Description BindableDictExtensionUnregisterOnAdd<TKey, TValue> | Improve this Doc View Source RegisterOnRemove(Action<TKey, TValue>) Declaration public BindableDictExtensionUnregisterOnRemove<TKey, TValue> RegisterOnRemove(Action<TKey, TValue> onRemove) Parameters Type Name Description Action<TKey, TValue> onRemove Returns Type Description BindableDictExtensionUnregisterOnRemove<TKey, TValue> | Improve this Doc View Source RemoveAndInvoke(KeyValuePair<TKey, TValue>) Declaration public void RemoveAndInvoke(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item | Improve this Doc View Source RemoveAndInvoke(TKey) Declaration public void RemoveAndInvoke(TKey key) Parameters Type Name Description TKey key | Improve this Doc View Source UnRegisterOnAdd(Action<TKey, TValue>) Declaration public void UnRegisterOnAdd(Action<TKey, TValue> onAdd) Parameters Type Name Description Action<TKey, TValue> onAdd | Improve this Doc View Source UnRegisterOnRemove(Action<TKey, TValue>) Declaration public void UnRegisterOnRemove(Action<TKey, TValue> onRemove) Parameters Type Name Description Action<TKey, TValue> onRemove Implements MikroFramework.BindableProperty.IBindableProperty IEnumerable<T> IEnumerable"
  },
  "api/Runtime.Utilities.BindableList-1.html": {
    "href": "api/Runtime.Utilities.BindableList-1.html",
    "title": "Class BindableList<T> | Example Unity documentation",
    "keywords": "Class BindableList<T> Inheritance object BindableProperty<List<T>> BindableList<T> Implements IBindableProperty IEnumerable<T> IEnumerable Inherited Members BindableProperty<List<T>>.Value BindableProperty<List<T>>.RegisterOnValueChaned(Action<List<T>>) BindableProperty<List<T>>.RegisterWithInitValue(Action<List<T>>) BindableProperty<List<T>>.RegisterWithInitValue(Action<List<T>, List<T>>) BindableProperty<List<T>>.ToString() BindableProperty<List<T>>.RegisterOnValueChaned(Action<List<T>, List<T>>) BindableProperty<List<T>>.UnRegisterOnValueChanged(Action<List<T>>) BindableProperty<List<T>>.UnRegisterOnValueChanged(Action<List<T>, List<T>>) BindableProperty<List<T>>.UnRegisterAll() BindableProperty<List<T>>.ObjectValue BindableProperty<List<T>>.RegisterOnObjectValueChaned(Action<object>) BindableProperty<List<T>>.RegisterOnObjectValueChaned(Action<object, object>) BindableProperty<List<T>>.RegisterWithInitObject(Action<object>) BindableProperty<List<T>>.RegisterWithInitObject(Action<object, object>) BindableProperty<List<T>>.UnRegisterOnObjectValueChanged(Action<object>) BindableProperty<List<T>>.UnRegisterOnObjectValueChanged(Action<object, object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Runtime.Utilities Assembly: MainGame.dll Syntax [Serializable] public class BindableList<T> : BindableProperty<List<T>>, IBindableProperty, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source BindableList(List<T>) Declaration public BindableList(List<T> defaultValue = null) Parameters Type Name Description List<T> defaultValue Properties | Improve this Doc View Source this[int] Declaration public T this[int index] { get; set; } Parameters Type Name Description int index Property Value Type Description T Methods | Improve this Doc View Source AddAndInvoke(T) Declaration public void AddAndInvoke(T item) Parameters Type Name Description T item | Improve this Doc View Source AddRangeAndInvoke(IEnumerable<T>) Declaration public void AddRangeAndInvoke(IEnumerable<T> collection) Parameters Type Name Description IEnumerable<T> collection | Improve this Doc View Source ClearAndInvoke() Declaration public void ClearAndInvoke() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> | Improve this Doc View Source InsertAndInvoke(int, T) Declaration public void InsertAndInvoke(int index, T item) Parameters Type Name Description int index T item | Improve this Doc View Source InsertRangeAndInvoke(int, IEnumerable<T>) Declaration public void InsertRangeAndInvoke(int index, IEnumerable<T> collection) Parameters Type Name Description int index IEnumerable<T> collection | Improve this Doc View Source RegisterOnAdd(Action<T>) Declaration public IUnRegister RegisterOnAdd(Action<T> onAdd) Parameters Type Name Description Action<T> onAdd Returns Type Description IUnRegister | Improve this Doc View Source RegisterOnRemove(Action<T>) Declaration public IUnRegister RegisterOnRemove(Action<T> onRemove) Parameters Type Name Description Action<T> onRemove Returns Type Description IUnRegister | Improve this Doc View Source RemoveAndInvoke(T) Declaration public bool RemoveAndInvoke(T item) Parameters Type Name Description T item Returns Type Description bool | Improve this Doc View Source RemoveAtAndInvoke(int) Declaration public void RemoveAtAndInvoke(int index) Parameters Type Name Description int index | Improve this Doc View Source UnRegisterOnAdd(Action<T>) Declaration public void UnRegisterOnAdd(Action<T> onAdd) Parameters Type Name Description Action<T> onAdd | Improve this Doc View Source UnRegisterOnRemove(Action<T>) Declaration public void UnRegisterOnRemove(Action<T> onRemove) Parameters Type Name Description Action<T> onRemove Implements MikroFramework.BindableProperty.IBindableProperty IEnumerable<T> IEnumerable"
  },
  "api/Runtime.Utilities.BindablePropertyExtensionUnregisterOnAdd-1.html": {
    "href": "api/Runtime.Utilities.BindablePropertyExtensionUnregisterOnAdd-1.html",
    "title": "Class BindablePropertyExtensionUnregisterOnAdd<T> | Example Unity documentation",
    "keywords": "Class BindablePropertyExtensionUnregisterOnAdd<T> Inheritance object BindablePropertyExtensionUnregisterOnAdd<T> Implements IUnRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities Assembly: MainGame.dll Syntax public class BindablePropertyExtensionUnregisterOnAdd<T> : IUnRegister Type Parameters Name Description T Constructors | Improve this Doc View Source BindablePropertyExtensionUnregisterOnAdd(BindableList<T>, Action<T>) Declaration public BindablePropertyExtensionUnregisterOnAdd(BindableList<T> bindable, Action<T> onValueChanged) Parameters Type Name Description BindableList<T> bindable Action<T> onValueChanged Properties | Improve this Doc View Source Bindable Declaration public BindableList<T> Bindable { get; set; } Property Value Type Description BindableList<T> | Improve this Doc View Source OnValueChanged Declaration public Action<T> OnValueChanged { get; set; } Property Value Type Description Action<T> Methods | Improve this Doc View Source UnRegister() Declaration public void UnRegister() Implements MikroFramework.Event.IUnRegister"
  },
  "api/Runtime.Utilities.BindablePropertyExtensionUnregisterOnRemove-1.html": {
    "href": "api/Runtime.Utilities.BindablePropertyExtensionUnregisterOnRemove-1.html",
    "title": "Class BindablePropertyExtensionUnregisterOnRemove<T> | Example Unity documentation",
    "keywords": "Class BindablePropertyExtensionUnregisterOnRemove<T> Inheritance object BindablePropertyExtensionUnregisterOnRemove<T> Implements IUnRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities Assembly: MainGame.dll Syntax public class BindablePropertyExtensionUnregisterOnRemove<T> : IUnRegister Type Parameters Name Description T Constructors | Improve this Doc View Source BindablePropertyExtensionUnregisterOnRemove(BindableList<T>, Action<T>) Declaration public BindablePropertyExtensionUnregisterOnRemove(BindableList<T> bindable, Action<T> onValueChanged) Parameters Type Name Description BindableList<T> bindable Action<T> onValueChanged Properties | Improve this Doc View Source Bindable Declaration public BindableList<T> Bindable { get; set; } Property Value Type Description BindableList<T> | Improve this Doc View Source OnValueChanged Declaration public Action<T> OnValueChanged { get; set; } Property Value Type Description Action<T> Methods | Improve this Doc View Source UnRegister() Declaration public void UnRegister() Implements MikroFramework.Event.IUnRegister"
  },
  "api/Runtime.Utilities.ConfigSheet.ConfigDatas.html": {
    "href": "api/Runtime.Utilities.ConfigSheet.ConfigDatas.html",
    "title": "Class ConfigDatas | Example Unity documentation",
    "keywords": "Class ConfigDatas Inheritance object MikroSingleton<ConfigDatas> ConfigDatas Implements ISingleton Inherited Members MikroSingleton<ConfigDatas>.instance MikroSingleton<ConfigDatas>.Singleton object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities.ConfigSheet Assembly: MainGame.dll Syntax public class ConfigDatas : MikroSingleton<ConfigDatas>, ISingleton Properties | Improve this Doc View Source EnemyEntityConfigTable Declaration public ConfigTable EnemyEntityConfigTable { get; } Property Value Type Description ConfigTable Methods | Improve this Doc View Source OnSingletonInit() Declaration public override void OnSingletonInit() Overrides MikroFramework.Singletons.MikroSingleton<Runtime.Utilities.ConfigSheet.ConfigDatas>.OnSingletonInit() Implements MikroFramework.Singletons.ISingleton"
  },
  "api/Runtime.Utilities.ConfigSheet.ConfigTable.html": {
    "href": "api/Runtime.Utilities.ConfigSheet.ConfigTable.html",
    "title": "Class ConfigTable | Example Unity documentation",
    "keywords": "Class ConfigTable Inheritance object ConfigTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Runtime.Utilities.ConfigSheet Assembly: MainGame.dll Syntax public class ConfigTable Constructors | Improve this Doc View Source ConfigTable(string, string, string) Declaration public ConfigTable(string docID, string sheetID, string localBackupName) Parameters Type Name Description string docID string sheetID string localBackupName Methods | Improve this Doc View Source Get(string, string) Declaration public dynamic Get(string entityName, string key) Parameters Type Name Description string entityName string key Returns Type Description dynamic"
  },
  "api/Runtime.Utilities.ConfigSheet.html": {
    "href": "api/Runtime.Utilities.ConfigSheet.html",
    "title": "Namespace Runtime.Utilities.ConfigSheet | Example Unity documentation",
    "keywords": "Namespace Runtime.Utilities.ConfigSheet Classes ConfigDatas ConfigTable"
  },
  "api/Runtime.Utilities.html": {
    "href": "api/Runtime.Utilities.html",
    "title": "Namespace Runtime.Utilities | Example Unity documentation",
    "keywords": "Namespace Runtime.Utilities Namespaces Runtime.Utilities.ConfigSheet Classes BindableDictExtensionUnregisterOnAdd<TKey, TValue> BindableDictExtensionUnregisterOnRemove<TKey, TValue> BindableDictionary<TKey, TValue> BindableList<T> BindablePropertyExtensionUnregisterOnAdd<T> BindablePropertyExtensionUnregisterOnRemove<T>"
  },
  "api/Runtime.html": {
    "href": "api/Runtime.html",
    "title": "Namespace Runtime | Example Unity documentation",
    "keywords": "Namespace Runtime Namespaces Runtime.DataFramework Runtime.Utilities"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Example Unity documentation",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}