name: Build

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
jobs:
  buildAndTestForLinuxBasedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - .
        unityVersion:
          - 2021.3.25f1
        targetPlatform:
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key:
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
            hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          allowDirtyBuild: true
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Setup .NET
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.x' 
  
      - name: Install DocFX
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: |
          mkdir ~/docfx_install
          cd ~/docfx_install
          dotnet tool install --global docfx
      - name: Debug information
        run: |
          dotnet --info
          ls
          ls Assets/

      - name: Build Project 1
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: dotnet build  MainGame.csproj

      - name: Build Project 2
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: dotnet build  MikroFramework.csproj
        
      - name: Build docs
        run: |
          docfx docfx_project/docfx.json
          ls
        continue-on-error: true
  
      
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docfx_project/_site
    
